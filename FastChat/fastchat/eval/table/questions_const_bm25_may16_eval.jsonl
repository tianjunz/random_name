{"question_id": 1, "text": " Develop a system to segment sky, trees, buildings, and humans from photographs. Suggest an API that should be used to achieve this. The model should have a Mean IOU of atleast 60.3% on COCO val2017 dataset. \\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Semantic Segmentation\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Fully-Convolutional Network\\', \\'api_name\\': \\'fcn_resnet50\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'fcn_resnet50\\', pretrained=True)\", \\'api_arguments\\': [{\\'name\\': \\'pretrained\\', \\'type\\': \\'boolean\\', \\'description\\': \\'If True, returns a model pre-trained on COCO train2017\\'}], \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\', \\'PIL\\', \\'matplotlib\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'fcn_resnet50\\', pretrained=True)\", \\'model.eval()\\', \\'from PIL import Image\\', \\'from torchvision import transforms\\', \\'input_image = Image.open(filename)\\', \\'input_image = input_image.convert(\"RGB\")\\', \\'preprocess = transforms.Compose([\\', \\' transforms.ToTensor(),\\', \\' transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\\', \\'])\\', \\'input_tensor = preprocess(input_image)\\', \\'input_batch = input_tensor.unsqueeze(0)\\', \\'if torch.cuda.is_available():\\', \" input_batch = input_batch.to(\\'cuda\\')\", \" model.to(\\'cuda\\')\", \\'with torch.no_grad():\\', \" output = model(input_batch)[\\'out\\'][0]\", \\'output_predictions = output.argmax(0)\\'], \\'performance\\': {\\'dataset\\': \\'COCO val2017\\', \\'accuracy\\': {\\'fcn_resnet50\\': {\\'Mean IOU\\': 60.5, \\'Global Pixelwise Accuracy\\': 91.4}}}, \\'description\\': \\'FCN-ResNet is a Fully-Convolutional Network model using a ResNet-50 or a ResNet-101 backbone. The pre-trained models have been trained on a subset of COCO train2017, on the 20 categories that are present in the Pascal VOC dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 2, "text": " My startup is working on a fashion recommendation system. We need an API to classify fashion items into categories based on images. The model should achieve a top-5 error lower than 6.5% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 3, "text": " I am building an automated cancer cell classification system for the American Cancer Society. Suggest to me an API that can do classification. The model should have less than 7% top-5 error rate on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 4, "text": " I want to automatically remove the background from an input image. Which API should I use for this specific task, and what kind of accuracy can I expect?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'MobileNet v2\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'mobilenet_v2\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\', \\'PIL\\', \\'urllib\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision\\', \\'mobilenet_v2\\', pretrained=True)\", \\'model.eval()\\', \\'from PIL import Image\\', \\'from torchvision import transforms\\', \\'input_image = Image.open(filename)\\', \\'preprocess = transforms.Compose([\\', \\' transforms.Resize(256),\\', \\' transforms.CenterCrop(224),\\', \\' transforms.ToTensor(),\\', \\' transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\\', \\'])\\', \\'input_tensor = preprocess(input_image)\\', \\'input_batch = input_tensor.unsqueeze(0)\\', \\'if torch.cuda.is_available():\\', \" input_batch = input_batch.to(\\'cuda\\')\", \" model.to(\\'cuda\\')\", \\'with torch.no_grad():\\', \\' output = model(input_batch)\\', \\'probabilities = torch.nn.functional.softmax(output[0], dim=0)\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 28.12, \\'top-5_error\\': 9.71}}, \\'description\\': \\'The MobileNet v2 architecture is based on an inverted residual structure where the input and output of the residual block are thin bottleneck layers opposite to traditional residual models which use expanded representations in the input. MobileNet v2 uses lightweight depthwise convolutions to filter features in the intermediate expansion layer. Additionally, non-linearities in the narrow layers were removed in order to maintain representational power.\\'}', metadata={})]", "category": "generic"}
{"question_id": 5, "text": " I am a marine biologist and I need a model to identify different species of fishes from an underwater image taken from cameras. The model should have atleast 77% top-1 accuracy on the ImageNet dataset. \\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 6, "text": " Find an API that can classify an input image into one of the 1000 ImageNet classes with a top-1 error less than 22%.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 7, "text": " I want to build a proof of concept for a startup that can recognize and classify plants grown on urban balconies. Is there an API with a pretrained model that I can quickly use to demonstrate the potential of the idea?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 8, "text": " I want an API to identify various animals, plants, and objects from images. Can you find one for me that has a top-5 error of less than 12% on ImageNet dataset?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 9, "text": " I need an API that recognizes an object in an image and returns its class. The model should have a Top-5 error of less than 10% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'SqueezeNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'squeezenet1_1\\', pretrained=True)\", \\'api_arguments\\': {\\'version\\': \\'v0.10.0\\', \\'model\\': [\\'squeezenet1_1\\'], \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'squeezenet1_1\\', pretrained=True)\", \\'model.eval()\\', \\'from PIL import Image\\', \\'from torchvision import transforms\\', \\'input_image = Image.open(filename)\\', \\'preprocess = transforms.Compose([\\', \\' transforms.Resize(256),\\', \\' transforms.CenterCrop(224),\\', \\' transforms.ToTensor(),\\', \\' transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\\', \\'])\\', \\'input_tensor = preprocess(input_image)\\', \\'input_batch = input_tensor.unsqueeze(0)\\', \\'if torch.cuda.is_available():\\', \" input_batch = input_batch.to(\\'cuda\\')\", \" model.to(\\'cuda\\')\", \\'with torch.no_grad():\\', \\' output = model(input_batch)\\', \\'probabilities = torch.nn.functional.softmax(output[0], dim=0)\\', \\'print(probabilities)\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'squeezenet1_1\\': {\\'Top-1 error\\': 41.81, \\'Top-5 error\\': 19.38}}}, \\'description\\': \\'SqueezeNet is an image classification model that achieves AlexNet-level accuracy with 50x fewer parameters. It has two versions: squeezenet1_0 and squeezenet1_1, with squeezenet1_1 having 2.4x less computation and slightly fewer parameters than squeezenet1_0, without sacrificing accuracy.\\'}', metadata={})]", "category": "generic"}
{"question_id": 11, "text": " What API can recognize a poisonous mushroom in a given picture? I need an API that can achieve 8.5% top-5 error on ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 12, "text": " I'm working on a project that requires API for image classification, but I want a model that can provide improved inference performance as compared to EfficientNet-X or FBNet-V3. What API would you suggest?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'ResNet50\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'NVIDIA/DeepLearningExamples:torchhub\\', model=\\'nvidia_resnet50\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'pip install validators matplotlib\\'], \\'example_code\\': [\\'import torch\\', \\'from PIL import Image\\', \\'import torchvision.transforms as transforms\\', \\'import numpy as np\\', \\'import json\\', \\'import requests\\', \\'import matplotlib.pyplot as plt\\', \\'import warnings\\', \"warnings.filterwarnings(\\'ignore\\')\", \\'%matplotlib inline\\', \"device = torch.device(\\'cuda\\') if torch.cuda.is_available() else torch.device(\\'cpu\\')\", \"print(f\\'Using {device} for inference\\')\", \"resnet50 = torch.hub.load(\\'NVIDIA/DeepLearningExamples:torchhub\\', \\'nvidia_resnet50\\', pretrained=True)\", \"utils = torch.hub.load(\\'NVIDIA/DeepLearningExamples:torchhub\\', \\'nvidia_convnets_processing_utils\\')\", \\'resnet50.eval().to(device)\\', \\'uris = [...]\\', \\'batch = torch.cat([utils.prepare_input_from_uri(uri) for uri in uris]).to(device)\\', \\'with torch.no_grad():\\', \\' output = torch.nn.functional.softmax(resnet50(batch), dim=1)\\', \\'results = utils.pick_n_best(predictions=output, n=5)\\', \\'for uri, result in zip(uris, results):\\', \\' img = Image.open(requests.get(uri, stream=True).raw)\\', \\' img.thumbnail((256,256), Image.ANTIALIAS)\\', \\' plt.imshow(img)\\', \\' plt.show()\\', \\' print(result)\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': \\'~0.5% top1 improvement over ResNet50 v1\\'}, \\'description\\': \\'The ResNet50 v1.5 model is a modified version of the original ResNet50 v1 model. The difference between v1 and v1.5 is that, in the bottleneck blocks which requires downsampling, v1 has stride = 2 in the first 1x1 convolution, whereas v1.5 has stride = 2 in the 3x3 convolution. This difference makes ResNet50 v1.5 slightly more accurate (~0.5% top1) than v1, but comes with a small performance drawback (~5% imgs/sec). The model is initialized as described in Delving deep into rectifiers: Surpassing human-level performance on ImageNet classification. This model is trained with mixed precision using Tensor Cores on Volta, Turing, and the NVIDIA Ampere GPU architectures.\\'}', metadata={})]", "category": "generic"}
{"question_id": 13, "text": " Help me find an API capable of classifying images with a focus on efficiency. The model must have atleast 88% top-5 accuracy on ImageNet with under 3 million parameters.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 14, "text": " I am doing image classification for my e-commerce application. Suggest an API that can classify images with a limited number of parameters (around 2M). The model should have at least 67% top-1 accuracy on the Imagenet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Wide Residual Networks\\', \\'api_name\\': \\'wide_resnet50_2\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'wide_resnet50_2\\', pretrained=True)\", \\'api_arguments\\': \\'pretrained\\', \\'python_environment_requirements\\': \\'torch, torchvision\\', \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'wide_resnet50_2\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'wide_resnet50_2\\': {\\'Top-1 error\\': 21.49, \\'Top-5 error\\': 5.91}}}, \\'description\\': \\'Wide Residual networks simply have increased number of channels compared to ResNet. Otherwise the architecture is the same. Deeper ImageNet models with bottleneck block have increased number of channels in the inner 3x3 convolution. The wide_resnet50_2 and wide_resnet101_2 models were trained in FP16 with mixed precision training using SGD with warm restarts. Checkpoints have weights in half precision (except batch norm) for smaller size, and can be used in FP32 models too.\\'}', metadata={})]", "category": "generic"}
{"question_id": 15, "text": " I need an API to build a wildlife recognition app. The model should have above 90% top-5 accuracy for identification on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 16, "text": " Find an API suitable for a cell phone manufacturer wanting to embed an automatic plant species recognition feature in its camera app. The model should have top-1 error lower than 30% on ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 17, "text": " I work at an image recognition startup. Can you suggest a pre-trained deep learning API that can classify images? The model should have a top-1 error of less than 25% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 18, "text": " To support custom object detection, provide me an API for a dense convolutional network model that can achieve lower than 6.2% Top-5 error on ImageNet Dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 19, "text": " I need to find an high accuracy PyTorch model that can help me classify penguins into different species. The model should have a top-1 accuracy of at least 77% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 20, "text": " A car factory wants a feature that can identify and distinguish between cars and trucks in an image. Provide me with an API for this task. The model should have a top-1 accuracy of atleast 79% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Efficient networks by generating more features from cheap operations\\', \\'api_name\\': \\'GhostNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'huawei-noah/ghostnet\\', model=\\'ghostnet_1x\\', pretrained=True)\", \\'api_arguments\\': [\\'pretrained\\'], \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\', \\'PIL\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'huawei-noah/ghostnet\\', \\'ghostnet_1x\\', pretrained=True)\", \\'model.eval()\\', \\'input_image = Image.open(filename)\\', \\'preprocess = transforms.Compose([\\', \\' transforms.Resize(256),\\', \\' transforms.CenterCrop(224),\\', \\' transforms.ToTensor(),\\', \\' transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\\', \\'])\\', \\'input_tensor = preprocess(input_image)\\', \\'input_batch = input_tensor.unsqueeze(0)\\', \\'if torch.cuda.is_available():\\', \" input_batch = input_batch.to(\\'cuda\\')\", \" model.to(\\'cuda\\')\", \\'with torch.no_grad():\\', \\' output = model(input_batch)\\', \\'probabilities = torch.nn.functional.softmax(output[0], dim=0)\\', \\'print(probabilities)\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'Top-1 acc\\': \\'73.98\\', \\'Top-5 acc\\': \\'91.46\\'}}, \\'description\\': \\'The GhostNet architecture is based on an Ghost module structure which generates more features from cheap operations. Based on a set of intrinsic feature maps, a series of cheap operations are applied to generate many ghost feature maps that could fully reveal information underlying intrinsic features. Experiments conducted on benchmarks demonstrate the superiority of GhostNet in terms of speed and accuracy tradeoff.\\'}', metadata={})]", "category": "generic"}
{"question_id": 21, "text": " Can you suggest a classification model that can identify animals in an image? The model should achieve at least 82% accuracy on the ImageNet datast.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 22, "text": " I'm developing an ecommerce website and need a model to help classify products based on input images. Please recommend a pre-trained model with a top-1 error of less than 25% on ImageNet large scale dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 23, "text": " Suggest an API to design an optimal neural network for a smartphone app that can detect food groups in real-time using the smartphone camera. The model needs to achieve at least 75% accuracy.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Object Detection\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Object Detection, Drivable Area Segmentation, Lane Detection\\', \\'api_name\\': \\'YOLOP\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'hustvl/yolop\\', model=\\'yolop\\', pretrained=True)\", \\'api_arguments\\': \\'pretrained\\', \\'python_environment_requirements\\': \\'pip install -qr https://github.com/hustvl/YOLOP/blob/main/requirements.txt\\', \\'example_code\\': \"import torch\\\\nmodel = torch.hub.load(\\'hustvl/yolop\\', \\'yolop\\', pretrained=True)\\\\nimg = torch.randn(1,3,640,640)\\\\ndet_out, da_seg_out,ll_seg_out = model(img)\", \\'performance\\': {\\'dataset\\': \\'BDD100K\\', \\'accuracy\\': {\\'Object Detection\\': {\\'Recall(%)\\': 89.2, \\'mAP50(%)\\': 76.5, \\'Speed(fps)\\': 41}, \\'Drivable Area Segmentation\\': {\\'mIOU(%)\\': 91.5, \\'Speed(fps)\\': 41}, \\'Lane Detection\\': {\\'mIOU(%)\\': 70.5, \\'IOU(%)\\': 26.2}}}, \\'description\\': \\'YOLOP is an efficient multi-task network that can jointly handle three crucial tasks in autonomous driving: object detection, drivable area segmentation and lane detection. And it is also the first to reach real-time on embedded devices while maintaining state-of-the-art level performance on the BDD100K dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 24, "text": " A photographer needs an API that can help identify objects. Recommend an API that has a top-5 error below 15% and top-1 error below 40% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 25, "text": " I am looking for an image classifier model that has less computation and fewer parameters without sacrificing performance compared to AlexNet. What model and API do you suggest that achieve this criterion?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'SqueezeNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'squeezenet1_1\\', pretrained=True)\", \\'api_arguments\\': {\\'version\\': \\'v0.10.0\\', \\'model\\': [\\'squeezenet1_1\\'], \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'squeezenet1_1\\', pretrained=True)\", \\'model.eval()\\', \\'from PIL import Image\\', \\'from torchvision import transforms\\', \\'input_image = Image.open(filename)\\', \\'preprocess = transforms.Compose([\\', \\' transforms.Resize(256),\\', \\' transforms.CenterCrop(224),\\', \\' transforms.ToTensor(),\\', \\' transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\\', \\'])\\', \\'input_tensor = preprocess(input_image)\\', \\'input_batch = input_tensor.unsqueeze(0)\\', \\'if torch.cuda.is_available():\\', \" input_batch = input_batch.to(\\'cuda\\')\", \" model.to(\\'cuda\\')\", \\'with torch.no_grad():\\', \\' output = model(input_batch)\\', \\'probabilities = torch.nn.functional.softmax(output[0], dim=0)\\', \\'print(probabilities)\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'squeezenet1_1\\': {\\'Top-1 error\\': 41.81, \\'Top-5 error\\': 19.38}}}, \\'description\\': \\'SqueezeNet is an image classification model that achieves AlexNet-level accuracy with 50x fewer parameters. It has two versions: squeezenet1_0 and squeezenet1_1, with squeezenet1_1 having 2.4x less computation and slightly fewer parameters than squeezenet1_0, without sacrificing accuracy.\\'}', metadata={})]", "category": "generic"}
{"question_id": 26, "text": " Our company uses camera to detect if the client is wearing a hat. We need a high performance API to recognize the object. We also need a model that has a top-1 error lower than 30% on ImageNet.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 27, "text": " Present a pre-trained model that can help me in detecting and categorizing the presence and the types of diseases on plants by analyzing images of leaves. The top-1 error should not exceed 30% for the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 28, "text": " I need to identify animals in different images. Tell me the name of the neural network that can classify images with a top-5 error less than 10% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 29, "text": " Which API can I apply for classifying images with 69.65% top-1 accuracy and doesn't use tricks such as mixup, cutmix or autoaug/randaug?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 31, "text": " I'm building a self-driving car software and I need an API that can simultaneously classify traffic objects, detect drivable areas, and lanes all in real-time. The model should have high accuracy, atleast 85%, on the BDD100K dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Object Detection\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Traffic Object Detection, Drivable Area Segmentation, Lane Detection\\', \\'api_name\\': \\'HybridNets\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'datvuthanh/hybridnets\\', model=\\'hybridnets\\', pretrained=True)\", \\'api_arguments\\': \\'pretrained\\', \\'python_environment_requirements\\': \\'Python>=3.7, PyTorch>=1.10\\', \\'example_code\\': \"import torch\\\\nmodel = torch.hub.load(\\'datvuthanh/hybridnets\\', \\'hybridnets\\', pretrained=True)\\\\nimg = torch.randn(1,3,640,384)\\\\nfeatures, regression, classification, anchors, segmentation = model(img)\", \\'performance\\': {\\'dataset\\': [{\\'name\\': \\'BDD100K\\', \\'accuracy\\': {\\'Traffic Object Detection\\': {\\'Recall (%)\\': 92.8, \\'mAP@0.5 (%)\\': 77.3}, \\'Drivable Area Segmentation\\': {\\'Drivable mIoU (%)\\': 90.5}, \\'Lane Line Detection\\': {\\'Accuracy (%)\\': 85.4, \\'Lane Line IoU (%)\\': 31.6}}}]}, \\'description\\': \\'HybridNets is an end2end perception network for multi-tasks. Our work focused on traffic object detection, drivable area segmentation and lane detection. HybridNets can run real-time on embedded systems, and obtains SOTA Object Detection, Lane Detection on BDD100K Dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 32, "text": " One of my friends owns thousands of photos and is overwhelmed by the challenge of organizing them. Recommend an API that can classify these photos into folders such as animals, nature, and food. The model should have a top-1 accuracy of at least 85% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 33, "text": " I want to build an image classification system with a low percentage of top-1 error. Can you recommend an API to start with? An acceptable top-1 error should be lower than 22.5% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 34, "text": " Dropbox is developing a image classification system for their photo gallery. They are looking for an API that can classify images with a top-5 accuracy of atleast 93% on the ImageNet dataset. Provide the API details.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 35, "text": " A researcher needs to improve the accuracy of their classification task related to plant species. Recommend an API that can achieve more than 80% accuracy on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'ResNext WSL\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/WSL-Images\\', model=\\'resnext101_32x48d_wsl\\', pretrained=True)\", \\'api_arguments\\': [{\\'name\\': \\'resnext101_32x48d_wsl\\', \\'type\\': \\'str\\', \\'description\\': \\'ResNeXt-101 32x48d WSL model\\'}], \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/WSL-Images\\', \\'resnext101_32x48d_wsl\\')\", \\'model.eval()\\', \\'from PIL import Image\\', \\'from torchvision import transforms\\', \\'input_image = Image.open(filename)\\', \\'preprocess = transforms.Compose([\\', \\' transforms.Resize(256),\\', \\' transforms.CenterCrop(224),\\', \\' transforms.ToTensor(),\\', \\' transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\\', \\'])\\', \\'input_tensor = preprocess(input_image)\\', \\'input_batch = input_tensor.unsqueeze(0)\\', \\'if torch.cuda.is_available():\\', \" input_batch = input_batch.to(\\'cuda\\')\", \" model.to(\\'cuda\\')\", \\'with torch.no_grad():\\', \\' output = model(input_batch)\\', \\'print(output[0])\\', \\'print(torch.nn.functional.softmax(output[0], dim=0))\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'ResNeXt-101 32x48d\\': {\\'Top-1 Acc.\\': \\'85.4\\', \\'Top-5 Acc.\\': \\'97.6\\'}}}, \\'description\\': \\'The provided ResNeXt models are pre-trained in weakly-supervised fashion on 940 million public images with 1.5K hashtags matching with 1000 ImageNet1K synsets, followed by fine-tuning on ImageNet1K dataset. The models significantly improve the training accuracy on ImageNet compared to training from scratch. They achieve state-of-the-art accuracy of 85.4% on ImageNet with the ResNext-101 32x48d model.\\'}', metadata={})]", "category": "generic"}
{"question_id": 36, "text": " Provide me with an API that can identify species of a plant through its imagery. Make sure the model achieves an accuracy of at least 82% on ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 37, "text": " I want to check if my skin mole is benign or malignant from a picture of my mole using a readily available AI. What API can you suggest that has at least top-5 error of 6.44% or better on ImageNet?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 38, "text": " Suggest an image classification API to classify different species of birds from images captured by birdwatchers. I need the model to have at least 83% accuracy on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 39, "text": " For the OpenAI Prompt Engineering team, I want to find a deep learning API that can classify images with top-1 error rate of below 30%. The model should be pretrained.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 40, "text": " Create a face mask detector using deep learning. The model should have at least 93% top-1 accuracy on ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 41, "text": " I am building a mammogram classification system with the goal of identifying breast cancer. Suggest an API call with pre-trained model which has lower top-1 error than 25% on ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 42, "text": " A company wants a system for classifying different types of cacti from images. Which API should they use? The model should have less than 6% top-5 error rate in the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 43, "text": " Tell me an API that can classify residential and commercial buildings with a top-1 accuracy of at least 83% on ImageNet.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'HarDNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'PingoLH/Pytorch-HarDNet\\', model=\\'hardnet68\\', pretrained=True)\", \\'api_arguments\\': [{\\'name\\': \\'hardnet68\\', \\'type\\': \\'str\\', \\'description\\': \\'HarDNet-68 model\\'}], \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'PingoLH/Pytorch-HarDNet\\', \\'hardnet68\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'hardnet68\\': {\\'Top-1 error\\': 23.52, \\'Top-5 error\\': 6.99}}}, \\'description\\': \\'Harmonic DenseNet (HarDNet) is a low memory trafficCNN model, which is fast and efficient. The basic concept is to minimize both computational cost and memory access cost at the same time, such that the HarDNet models are 35% faster than ResNet running on GPU comparing to models with the same accuracy (except the two DS models that were designed for comparing with MobileNet).\\'}', metadata={})]", "category": "generic"}
{"question_id": 44, "text": " Recommend an API to build a custom image classifier to detect bird species. The API must achieve less than 10% top-5 error on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 45, "text": " My team is working on the problem of classifying cat breeds from images. Which API would you suggest that can achieve a Top-5 error below 6% on the ImageNet dataset?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 46, "text": " Flickr is looking for an image classification model that has been pretrained on ImageNet to accurately categorize their photos. Suggest an API that can deliver this. The model should also showcase state-of-the-art inference performance that is 2x faster than EfficientNet-X.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Object Detection\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Object Detection, Drivable Area Segmentation, Lane Detection\\', \\'api_name\\': \\'YOLOP\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'hustvl/yolop\\', model=\\'yolop\\', pretrained=True)\", \\'api_arguments\\': \\'pretrained\\', \\'python_environment_requirements\\': \\'pip install -qr https://github.com/hustvl/YOLOP/blob/main/requirements.txt\\', \\'example_code\\': \"import torch\\\\nmodel = torch.hub.load(\\'hustvl/yolop\\', \\'yolop\\', pretrained=True)\\\\nimg = torch.randn(1,3,640,640)\\\\ndet_out, da_seg_out,ll_seg_out = model(img)\", \\'performance\\': {\\'dataset\\': \\'BDD100K\\', \\'accuracy\\': {\\'Object Detection\\': {\\'Recall(%)\\': 89.2, \\'mAP50(%)\\': 76.5, \\'Speed(fps)\\': 41}, \\'Drivable Area Segmentation\\': {\\'mIOU(%)\\': 91.5, \\'Speed(fps)\\': 41}, \\'Lane Detection\\': {\\'mIOU(%)\\': 70.5, \\'IOU(%)\\': 26.2}}}, \\'description\\': \\'YOLOP is an efficient multi-task network that can jointly handle three crucial tasks in autonomous driving: object detection, drivable area segmentation and lane detection. And it is also the first to reach real-time on embedded devices while maintaining state-of-the-art level performance on the BDD100K dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 47, "text": " I want a versatile and efficient way of classifying images for my mobile device, so provide me an API from an OFA network with good performance under different resource constraints.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Once-for-all (OFA) Networks\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'mit-han-lab/once-for-all\\', model=\\'ofa_supernet_mbv3_w10\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'mit-han-lab/once-for-all\\', \\'model\\': \\'ofa_supernet_mbv3_w10\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"super_net_name = \\'ofa_supernet_mbv3_w10\\'\", \"super_net = torch.hub.load(\\'mit-han-lab/once-for-all\\', super_net_name, pretrained=True).eval()\"], \\'performance\\': {\\'description\\': \\'OFA networks outperform state-of-the-art NAS methods (up to 4.0% ImageNet top1 accuracy improvement over MobileNetV3, or same accuracy but 1.5x faster than MobileNetV3, 2.6x faster than EfficientNet w.r.t measured latency) while reducing many orders of magnitude GPU hours and CO2 emission.\\'}, \\'description\\': \\'Once-for-all (OFA) networks are a family of neural networks designed by MIT Han Lab. They decouple training and search, achieving efficient inference across various edge devices and resource constraints. OFA networks are pretrained on the IMAGENET dataset and are capable of classifying images into different categories.\\'}', metadata={})]", "category": "generic"}
{"question_id": 48, "text": " I need an API for my app to classify fruits and vegetables from images. The model should have at least 80% top-1 accuracy on the ImageNet1K dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 49, "text": " A recycling facility is processing images of waste to classify its content. Recommend an API that can classify images to assist the facility with a top-1 accuracy of at least 76% on ImageNet Dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 50, "text": " We are designing an intelligent urban planning system for the San Francisco, and we need an API to segment roads, buildings, and greenery within satellite images. The API should achieve a Mean IoU of at least 67% on the COCO dataset. \\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 51, "text": " Ralph needs to segment vehicles and pedestrians from street photos for autonomous driving. Propose an API that will be able to solve the task. Their model should have a mean IoU of 60% on the Pascal VOC Dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Semantic Segmentation\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'DeepLabV3\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'deeplabv3_resnet50\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'latest\\', \\'torchvision\\': \\'latest\\', \\'PIL\\': \\'latest\\', \\'matplotlib\\': \\'latest\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'deeplabv3_resnet50\\', pretrained=True)\", \\'model.eval()\\', \\'from PIL import Image\\', \\'from torchvision import transforms\\', \\'input_image = Image.open(filename)\\', \"input_image = input_image.convert(\\'RGB\\')\", \\'preprocess = transforms.Compose([\\', \\' transforms.ToTensor(),\\', \\' transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\\', \\'])\\', \\'input_tensor = preprocess(input_image)\\', \\'input_batch = input_tensor.unsqueeze(0)\\', \\'if torch.cuda.is_available():\\', \" input_batch = input_batch.to(\\'cuda\\')\", \" model.to(\\'cuda\\')\", \\'with torch.no_grad():\\', \" output = model(input_batch)[\\'out\\'][0]\", \\'output_predictions = output.argmax(0)\\'], \\'performance\\': {\\'dataset\\': \\'COCO val2017\\', \\'accuracy\\': [{\\'model\\': \\'deeplabv3_resnet50\\', \\'Mean IOU\\': 66.4, \\'Global Pixelwise Accuracy\\': 92.4}]}, \\'description\\': \\'DeepLabV3 models with ResNet-50, ResNet-101 and MobileNet-V3 backbones for semantic segmentation. The pre-trained models have been trained on a subset of COCO train2017, on the 20 categories that are present in the Pascal VOC dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 52, "text": " I need an API to classify images efficiently, the API must give over 97% Top-5 accuracy on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Once-for-all (OFA) Networks\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'mit-han-lab/once-for-all\\', model=\\'ofa_supernet_mbv3_w10\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'mit-han-lab/once-for-all\\', \\'model\\': \\'ofa_supernet_mbv3_w10\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"super_net_name = \\'ofa_supernet_mbv3_w10\\'\", \"super_net = torch.hub.load(\\'mit-han-lab/once-for-all\\', super_net_name, pretrained=True).eval()\"], \\'performance\\': {\\'description\\': \\'OFA networks outperform state-of-the-art NAS methods (up to 4.0% ImageNet top1 accuracy improvement over MobileNetV3, or same accuracy but 1.5x faster than MobileNetV3, 2.6x faster than EfficientNet w.r.t measured latency) while reducing many orders of magnitude GPU hours and CO2 emission.\\'}, \\'description\\': \\'Once-for-all (OFA) networks are a family of neural networks designed by MIT Han Lab. They decouple training and search, achieving efficient inference across various edge devices and resource constraints. OFA networks are pretrained on the IMAGENET dataset and are capable of classifying images into different categories.\\'}', metadata={})]", "category": "generic"}
{"question_id": 53, "text": " I\\u2019m working on a project where I need to segment abnormalities found in brain MRI scans. Can you suggest an API that can efficiently handle this task?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Object Detection\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Object Detection, Drivable Area Segmentation, Lane Detection\\', \\'api_name\\': \\'YOLOP\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'hustvl/yolop\\', model=\\'yolop\\', pretrained=True)\", \\'api_arguments\\': \\'pretrained\\', \\'python_environment_requirements\\': \\'pip install -qr https://github.com/hustvl/YOLOP/blob/main/requirements.txt\\', \\'example_code\\': \"import torch\\\\nmodel = torch.hub.load(\\'hustvl/yolop\\', \\'yolop\\', pretrained=True)\\\\nimg = torch.randn(1,3,640,640)\\\\ndet_out, da_seg_out,ll_seg_out = model(img)\", \\'performance\\': {\\'dataset\\': \\'BDD100K\\', \\'accuracy\\': {\\'Object Detection\\': {\\'Recall(%)\\': 89.2, \\'mAP50(%)\\': 76.5, \\'Speed(fps)\\': 41}, \\'Drivable Area Segmentation\\': {\\'mIOU(%)\\': 91.5, \\'Speed(fps)\\': 41}, \\'Lane Detection\\': {\\'mIOU(%)\\': 70.5, \\'IOU(%)\\': 26.2}}}, \\'description\\': \\'YOLOP is an efficient multi-task network that can jointly handle three crucial tasks in autonomous driving: object detection, drivable area segmentation and lane detection. And it is also the first to reach real-time on embedded devices while maintaining state-of-the-art level performance on the BDD100K dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 54, "text": " An architect company wants to analyze the roof patterns from the google earth images, and then divide images on the basis of roof structures. Which API should they opt for? The required model should have a mean IoU of atleast 60% for the given dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 55, "text": " Design a security system for an industrial warehouse that guarantees a 99% accuracy. Which image classification API can be used to meet the security requirements in the warehouse?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 56, "text": " Help me find an API that automatically searches for the best Convolutional Neural Network structures that are optimized for GPU and provide at least 75.1% accuracy on some dataset without including the API name.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'GPUNet Networks\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'NVIDIA/DeepLearningExamples:torchhub\\', model=\\'nvidia_gpunet\\', pretrained=True, model_type=model_type, model_math=precision)\", \\'api_arguments\\': {\\'repository\\': \\'NVIDIA/DeepLearningExamples:torchhub\\', \\'model\\': \\'nvidia_gpunet\\', \\'pretrained\\': \\'True\\', \\'model_type\\': \\'GPUNet-0\\', \\'model_math\\': \\'fp32\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'validators\\', \\'matplotlib\\', \\'timm==0.5.4\\'], \\'example_code\\': [\\'import torch\\', \"model_type = \\'GPUNet-0\\'\", \"precision = \\'fp32\\'\", \"gpunet = torch.hub.load(\\'NVIDIA/DeepLearningExamples:torchhub\\', \\'nvidia_gpunet\\', pretrained=True, model_type=model_type, model_math=precision)\", \"device = torch.device(\\'cuda\\') if torch.cuda.is_available() else torch.device(\\'cpu\\')\", \\'gpunet.to(device)\\', \\'gpunet.eval()\\'], \\'performance\\': {\\'dataset\\': \\'IMAGENET\\', \\'description\\': \\'GPUNet demonstrates state-of-the-art inference performance up to 2x faster than EfficientNet-X and FBNet-V3.\\'}, \\'description\\': \\'GPUNet is a family of Convolutional Neural Networks designed by NVIDIA using novel Neural Architecture Search (NAS) methods. They are optimized for NVIDIA GPU and TensorRT performance. GPUNet models are pretrained on the IMAGENET dataset and are capable of classifying images into different categories. The models are provided by the NVIDIA Deep Learning Examples library.\\'}', metadata={})]", "category": "generic"}
{"question_id": 57, "text": " A zoologist is looking for an API to classify images of wild animals. Suggest an API that can identify the species with a top-1 error of at most 22.63% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 58, "text": " Recommend an API for classifying puppy images according to their breeds. The required model should have a top-1 accuracy of no more than 22.38% and a top-5 accuracy of no more than 6.3% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Once-for-all (OFA) Networks\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'mit-han-lab/once-for-all\\', model=\\'ofa_supernet_mbv3_w10\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'mit-han-lab/once-for-all\\', \\'model\\': \\'ofa_supernet_mbv3_w10\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"super_net_name = \\'ofa_supernet_mbv3_w10\\'\", \"super_net = torch.hub.load(\\'mit-han-lab/once-for-all\\', super_net_name, pretrained=True).eval()\"], \\'performance\\': {\\'description\\': \\'OFA networks outperform state-of-the-art NAS methods (up to 4.0% ImageNet top1 accuracy improvement over MobileNetV3, or same accuracy but 1.5x faster than MobileNetV3, 2.6x faster than EfficientNet w.r.t measured latency) while reducing many orders of magnitude GPU hours and CO2 emission.\\'}, \\'description\\': \\'Once-for-all (OFA) networks are a family of neural networks designed by MIT Han Lab. They decouple training and search, achieving efficient inference across various edge devices and resource constraints. OFA networks are pretrained on the IMAGENET dataset and are capable of classifying images into different categories.\\'}', metadata={})]", "category": "generic"}
{"question_id": 59, "text": " Jane is creating an AI model to look at a set of paintings and classify the artist. What would be the right API to use? The required model should have at least 81% Top-1 accuracy and low FLOPs.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'HarDNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'PingoLH/Pytorch-HarDNet\\', model=\\'hardnet68\\', pretrained=True)\", \\'api_arguments\\': [{\\'name\\': \\'hardnet68\\', \\'type\\': \\'str\\', \\'description\\': \\'HarDNet-68 model\\'}], \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'PingoLH/Pytorch-HarDNet\\', \\'hardnet68\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'hardnet68\\': {\\'Top-1 error\\': 23.52, \\'Top-5 error\\': 6.99}}}, \\'description\\': \\'Harmonic DenseNet (HarDNet) is a low memory trafficCNN model, which is fast and efficient. The basic concept is to minimize both computational cost and memory access cost at the same time, such that the HarDNet models are 35% faster than ResNet running on GPU comparing to models with the same accuracy (except the two DS models that were designed for comparing with MobileNet).\\'}', metadata={})]", "category": "generic"}
{"question_id": 60, "text": " I am working on an AI camera and want to embed a highly efficient image classification model achieving atleast 19.58% top-5 error. Suggest me an API for this purpose.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'ShuffleNet v2\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'shufflenet_v2_x1_0\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'torch\\', \\'torchvision\\': \\'torchvision\\', \\'PIL\\': \\'Image\\', \\'urllib\\': \\'urllib\\'}, \\'example_code\\': {\\'import_libraries\\': [\\'import torch\\', \\'from PIL import Image\\', \\'from torchvision import transforms\\', \\'import urllib\\'], \\'load_model\\': [\"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'shufflenet_v2_x1_0\\', pretrained=True)\", \\'model.eval()\\'], \\'load_image\\': [\"url, filename = (\\'https://github.com/pytorch/hub/raw/master/images/dog.jpg\\', \\'dog.jpg\\')\", \\'try: urllib.URLopener().retrieve(url, filename)\\', \\'except: urllib.request.urlretrieve(url, filename)\\', \\'input_image = Image.open(filename)\\'], \\'preprocess_image\\': [\\'preprocess = transforms.Compose([\\', \\' transforms.Resize(256),\\', \\' transforms.CenterCrop(224),\\', \\' transforms.ToTensor(),\\', \\' transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\\', \\'])\\', \\'input_tensor = preprocess(input_image)\\', \\'input_batch = input_tensor.unsqueeze(0)\\'], \\'run_inference\\': [\\'if torch.cuda.is_available():\\', \" input_batch = input_batch.to(\\'cuda\\')\", \" model.to(\\'cuda\\')\", \\'with torch.no_grad():\\', \\' output = model(input_batch)\\'], \\'get_probabilities\\': [\\'probabilities = torch.nn.functional.softmax(output[0], dim=0)\\'], \\'top_categories\\': [\\'top5_prob, top5_catid = torch.topk(probabilities, 5)\\', \\'for i in range(top5_prob.size(0)):\\', \\' print(categories[top5_catid[i]], top5_prob[i].item())\\']}, \\'performance\\': {\\'dataset\\': \\'Imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 30.64, \\'top-5_error\\': 11.68}}, \\'description\\': \\'ShuffleNet V2 is an efficient ConvNet optimized for speed and memory, pre-trained on Imagenet. It is designed based on practical guidelines for efficient network design, including speed and accuracy tradeoff.\\'}', metadata={})]", "category": "generic"}
{"question_id": 61, "text": " I am a student in the City College of San Francisco. I need to find a lightweight API for image classification that requires less memory and provides a Top-1 error lower than 45%. Give me an API that I can use.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 62, "text": " Identify an API to recognize product images in supermarket with an accuracy of less than 10% top-5 error on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 63, "text": " I'm studying the performance of different neural net architectures. Recommend me an image recognition API with a top-5 error rate below 11.5% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 64, "text": " I am looking to create a plant recognition application, and I need a pre-trained model that can be fine-tuned for plant classification. It should reach an accuracy of atleast 81.2% on ImageNet for ResNet-50 architecture.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 65, "text": " Find me an API that classifies animals in an image with at least 80% top-1 accuracy on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'HarDNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'PingoLH/Pytorch-HarDNet\\', model=\\'hardnet68\\', pretrained=True)\", \\'api_arguments\\': [{\\'name\\': \\'hardnet68\\', \\'type\\': \\'str\\', \\'description\\': \\'HarDNet-68 model\\'}], \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'PingoLH/Pytorch-HarDNet\\', \\'hardnet68\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'hardnet68\\': {\\'Top-1 error\\': 23.52, \\'Top-5 error\\': 6.99}}}, \\'description\\': \\'Harmonic DenseNet (HarDNet) is a low memory trafficCNN model, which is fast and efficient. The basic concept is to minimize both computational cost and memory access cost at the same time, such that the HarDNet models are 35% faster than ResNet running on GPU comparing to models with the same accuracy (except the two DS models that were designed for comparing with MobileNet).\\'}', metadata={})]", "category": "generic"}
{"question_id": 66, "text": " Identify an API that can be used to classify cooking tutorial videos into different cuisines. The model should have a top-5 accuracy of at least 90% on the Kinetics 400 dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 67, "text": " A traffic engineer in New York City wants to create digital maps of road lanes to analyze road congestion patterns. Provide me with an API that can detect lane lines with atleast 85% accuracy.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Object Detection\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Traffic Object Detection, Drivable Area Segmentation, Lane Detection\\', \\'api_name\\': \\'HybridNets\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'datvuthanh/hybridnets\\', model=\\'hybridnets\\', pretrained=True)\", \\'api_arguments\\': \\'pretrained\\', \\'python_environment_requirements\\': \\'Python>=3.7, PyTorch>=1.10\\', \\'example_code\\': \"import torch\\\\nmodel = torch.hub.load(\\'datvuthanh/hybridnets\\', \\'hybridnets\\', pretrained=True)\\\\nimg = torch.randn(1,3,640,384)\\\\nfeatures, regression, classification, anchors, segmentation = model(img)\", \\'performance\\': {\\'dataset\\': [{\\'name\\': \\'BDD100K\\', \\'accuracy\\': {\\'Traffic Object Detection\\': {\\'Recall (%)\\': 92.8, \\'mAP@0.5 (%)\\': 77.3}, \\'Drivable Area Segmentation\\': {\\'Drivable mIoU (%)\\': 90.5}, \\'Lane Line Detection\\': {\\'Accuracy (%)\\': 85.4, \\'Lane Line IoU (%)\\': 31.6}}}]}, \\'description\\': \\'HybridNets is an end2end perception network for multi-tasks. Our work focused on traffic object detection, drivable area segmentation and lane detection. HybridNets can run real-time on embedded systems, and obtains SOTA Object Detection, Lane Detection on BDD100K Dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 68, "text": " I am working at Tesla and I need an API to detect pedestrians, draw drivable area and lane lines using a model pre-trained on the BDD100K dataset. The model should have at least 76.5% mAP on object detection and a speed of 41fps.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Object Detection\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Traffic Object Detection, Drivable Area Segmentation, Lane Detection\\', \\'api_name\\': \\'HybridNets\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'datvuthanh/hybridnets\\', model=\\'hybridnets\\', pretrained=True)\", \\'api_arguments\\': \\'pretrained\\', \\'python_environment_requirements\\': \\'Python>=3.7, PyTorch>=1.10\\', \\'example_code\\': \"import torch\\\\nmodel = torch.hub.load(\\'datvuthanh/hybridnets\\', \\'hybridnets\\', pretrained=True)\\\\nimg = torch.randn(1,3,640,384)\\\\nfeatures, regression, classification, anchors, segmentation = model(img)\", \\'performance\\': {\\'dataset\\': [{\\'name\\': \\'BDD100K\\', \\'accuracy\\': {\\'Traffic Object Detection\\': {\\'Recall (%)\\': 92.8, \\'mAP@0.5 (%)\\': 77.3}, \\'Drivable Area Segmentation\\': {\\'Drivable mIoU (%)\\': 90.5}, \\'Lane Line Detection\\': {\\'Accuracy (%)\\': 85.4, \\'Lane Line IoU (%)\\': 31.6}}}]}, \\'description\\': \\'HybridNets is an end2end perception network for multi-tasks. Our work focused on traffic object detection, drivable area segmentation and lane detection. HybridNets can run real-time on embedded systems, and obtains SOTA Object Detection, Lane Detection on BDD100K Dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 69, "text": " A traffic camera is being installed to monitor the flow of traffic and read the license plate. Suggest an API call that can segment the vehicle simultaneously with semantic segmentation from a single image. The model should have a mean IOU of at least 65%.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'HarDNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'PingoLH/Pytorch-HarDNet\\', model=\\'hardnet39ds\\', pretrained=True)\", \\'api_arguments\\': [{\\'name\\': \\'hardnet39ds\\', \\'type\\': \\'str\\', \\'description\\': \\'HarDNet-39DS model\\'}], \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'PingoLH/Pytorch-HarDNet\\', \\'hardnet39ds\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'hardnet39ds\\': {\\'Top-1 error\\': 27.92, \\'Top-5 error\\': 9.57}}}, \\'description\\': \\'Harmonic DenseNet (HarDNet) is a low memory traffic CNN model, which is fast and efficient. The basic concept is to minimize both computational cost and memory access cost at the same time, such that the HarDNet models are 35% faster than ResNet running on GPU comparing to models with the same accuracy (except the two DS models that were designed for comparing with MobileNet).\\'}', metadata={})]", "category": "generic"}
{"question_id": 70, "text": " I am a wildlife photographer and want to create an app that identifies bird species. Give me an API which can perform image classification and has accuracy lower than 25% top-1 error.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'SqueezeNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'squeezenet1_1\\', pretrained=True)\", \\'api_arguments\\': {\\'version\\': \\'v0.10.0\\', \\'model\\': [\\'squeezenet1_1\\'], \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'squeezenet1_1\\', pretrained=True)\", \\'model.eval()\\', \\'from PIL import Image\\', \\'from torchvision import transforms\\', \\'input_image = Image.open(filename)\\', \\'preprocess = transforms.Compose([\\', \\' transforms.Resize(256),\\', \\' transforms.CenterCrop(224),\\', \\' transforms.ToTensor(),\\', \\' transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\\', \\'])\\', \\'input_tensor = preprocess(input_image)\\', \\'input_batch = input_tensor.unsqueeze(0)\\', \\'if torch.cuda.is_available():\\', \" input_batch = input_batch.to(\\'cuda\\')\", \" model.to(\\'cuda\\')\", \\'with torch.no_grad():\\', \\' output = model(input_batch)\\', \\'probabilities = torch.nn.functional.softmax(output[0], dim=0)\\', \\'print(probabilities)\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'squeezenet1_1\\': {\\'Top-1 error\\': 41.81, \\'Top-5 error\\': 19.38}}}, \\'description\\': \\'SqueezeNet is an image classification model that achieves AlexNet-level accuracy with 50x fewer parameters. It has two versions: squeezenet1_0 and squeezenet1_1, with squeezenet1_1 having 2.4x less computation and slightly fewer parameters than squeezenet1_0, without sacrificing accuracy.\\'}', metadata={})]", "category": "generic"}
{"question_id": 71, "text": " Help an app developer to identify the dog breed in images taken by users with an API. The used model should achieve at least 81% top-1 accuracy on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 72, "text": " From a given photograph, I want to automatically classify the objects present in the image. Can you suggest an API suitable for this task with an accuracy higher than 80% on the ImageNet dataset?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'HarDNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'PingoLH/Pytorch-HarDNet\\', model=\\'hardnet68\\', pretrained=True)\", \\'api_arguments\\': [{\\'name\\': \\'hardnet68\\', \\'type\\': \\'str\\', \\'description\\': \\'HarDNet-68 model\\'}], \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'PingoLH/Pytorch-HarDNet\\', \\'hardnet68\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'hardnet68\\': {\\'Top-1 error\\': 23.52, \\'Top-5 error\\': 6.99}}}, \\'description\\': \\'Harmonic DenseNet (HarDNet) is a low memory trafficCNN model, which is fast and efficient. The basic concept is to minimize both computational cost and memory access cost at the same time, such that the HarDNet models are 35% faster than ResNet running on GPU comparing to models with the same accuracy (except the two DS models that were designed for comparing with MobileNet).\\'}', metadata={})]", "category": "generic"}
{"question_id": 73, "text": " Our company is developing an app that is used on users' smartphones to identify plants, and we need an image classification model with around 75% accuracy. Recommend an API that is optimized for CPU usage.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'SqueezeNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'squeezenet1_1\\', pretrained=True)\", \\'api_arguments\\': {\\'version\\': \\'v0.10.0\\', \\'model\\': [\\'squeezenet1_1\\'], \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'squeezenet1_1\\', pretrained=True)\", \\'model.eval()\\', \\'from PIL import Image\\', \\'from torchvision import transforms\\', \\'input_image = Image.open(filename)\\', \\'preprocess = transforms.Compose([\\', \\' transforms.Resize(256),\\', \\' transforms.CenterCrop(224),\\', \\' transforms.ToTensor(),\\', \\' transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\\', \\'])\\', \\'input_tensor = preprocess(input_image)\\', \\'input_batch = input_tensor.unsqueeze(0)\\', \\'if torch.cuda.is_available():\\', \" input_batch = input_batch.to(\\'cuda\\')\", \" model.to(\\'cuda\\')\", \\'with torch.no_grad():\\', \\' output = model(input_batch)\\', \\'probabilities = torch.nn.functional.softmax(output[0], dim=0)\\', \\'print(probabilities)\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'squeezenet1_1\\': {\\'Top-1 error\\': 41.81, \\'Top-5 error\\': 19.38}}}, \\'description\\': \\'SqueezeNet is an image classification model that achieves AlexNet-level accuracy with 50x fewer parameters. It has two versions: squeezenet1_0 and squeezenet1_1, with squeezenet1_1 having 2.4x less computation and slightly fewer parameters than squeezenet1_0, without sacrificing accuracy.\\'}', metadata={})]", "category": "generic"}
{"question_id": 74, "text": " I have a deep learning model that needs to be optimized for GPU. Provide a recommendation for an API to achieve this with an ImageNet top-1 accuracy of at least 75%.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 75, "text": " Suggest an API that classifies car images into 1000 categories. Provide a code snippet to load an implementation that achieves a top-1 error rate lower than 30% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 76, "text": " I am a computer science student, and I am working on a project of handling image classification using deep learning. Please recommend me an API that runs on mobile devices, while having a top-1 error rate less than 30% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 77, "text": " Recommend an API that can do vehicle detection in a parking lot surveilance camera. The API should process both day and night images with the top-5 accuracy of at least 88.32% on the Imagenet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'HarDNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'PingoLH/Pytorch-HarDNet\\', model=\\'hardnet68\\', pretrained=True)\", \\'api_arguments\\': [{\\'name\\': \\'hardnet68\\', \\'type\\': \\'str\\', \\'description\\': \\'HarDNet-68 model\\'}], \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'PingoLH/Pytorch-HarDNet\\', \\'hardnet68\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'hardnet68\\': {\\'Top-1 error\\': 23.52, \\'Top-5 error\\': 6.99}}}, \\'description\\': \\'Harmonic DenseNet (HarDNet) is a low memory trafficCNN model, which is fast and efficient. The basic concept is to minimize both computational cost and memory access cost at the same time, such that the HarDNet models are 35% faster than ResNet running on GPU comparing to models with the same accuracy (except the two DS models that were designed for comparing with MobileNet).\\'}', metadata={})]", "category": "generic"}
{"question_id": 78, "text": " Develop a CNN-based image classifier with the VGG-16 model to detect various object categories in photos. The pre-trained model must achieve less than 10% top-5 error on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 79, "text": " A dog rescue center is looking for an input that can identify a dog's breed. Provide an API that can recognize the dog breed from a given dataset. To achieve this, the model should have around 30% top-1 error or less on ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 80, "text": " I'm developing a high-accuracy image classifier for a project, and I need an API that can achieve atleast 95% top-5 accuracy on the ImageNet dataset without using mixup/cutmix or other tricks.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 81, "text": " I need to identify animal species in a nature conservation project. Direcomt me to an API that can classify images into animal species with at least 87% top-5 accuracy on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 82, "text": " A newly developed drone by Airbus needs to do image segmentation to identify safe landing areas for itself. Recommend to me an API that can provide these segmentation maps from drone image feeds.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Object Detection\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Traffic Object Detection, Drivable Area Segmentation, Lane Detection\\', \\'api_name\\': \\'HybridNets\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'datvuthanh/hybridnets\\', model=\\'hybridnets\\', pretrained=True)\", \\'api_arguments\\': \\'pretrained\\', \\'python_environment_requirements\\': \\'Python>=3.7, PyTorch>=1.10\\', \\'example_code\\': \"import torch\\\\nmodel = torch.hub.load(\\'datvuthanh/hybridnets\\', \\'hybridnets\\', pretrained=True)\\\\nimg = torch.randn(1,3,640,384)\\\\nfeatures, regression, classification, anchors, segmentation = model(img)\", \\'performance\\': {\\'dataset\\': [{\\'name\\': \\'BDD100K\\', \\'accuracy\\': {\\'Traffic Object Detection\\': {\\'Recall (%)\\': 92.8, \\'mAP@0.5 (%)\\': 77.3}, \\'Drivable Area Segmentation\\': {\\'Drivable mIoU (%)\\': 90.5}, \\'Lane Line Detection\\': {\\'Accuracy (%)\\': 85.4, \\'Lane Line IoU (%)\\': 31.6}}}]}, \\'description\\': \\'HybridNets is an end2end perception network for multi-tasks. Our work focused on traffic object detection, drivable area segmentation and lane detection. HybridNets can run real-time on embedded systems, and obtains SOTA Object Detection, Lane Detection on BDD100K Dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 83, "text": " I'm building an app that uses image recognition to detect plants. I need an API that outperforms the basic ResNet50 v1 model by achieving slightly better accuracy on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'ResNet50\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'NVIDIA/DeepLearningExamples:torchhub\\', model=\\'nvidia_resnet50\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'pip install validators matplotlib\\'], \\'example_code\\': [\\'import torch\\', \\'from PIL import Image\\', \\'import torchvision.transforms as transforms\\', \\'import numpy as np\\', \\'import json\\', \\'import requests\\', \\'import matplotlib.pyplot as plt\\', \\'import warnings\\', \"warnings.filterwarnings(\\'ignore\\')\", \\'%matplotlib inline\\', \"device = torch.device(\\'cuda\\') if torch.cuda.is_available() else torch.device(\\'cpu\\')\", \"print(f\\'Using {device} for inference\\')\", \"resnet50 = torch.hub.load(\\'NVIDIA/DeepLearningExamples:torchhub\\', \\'nvidia_resnet50\\', pretrained=True)\", \"utils = torch.hub.load(\\'NVIDIA/DeepLearningExamples:torchhub\\', \\'nvidia_convnets_processing_utils\\')\", \\'resnet50.eval().to(device)\\', \\'uris = [...]\\', \\'batch = torch.cat([utils.prepare_input_from_uri(uri) for uri in uris]).to(device)\\', \\'with torch.no_grad():\\', \\' output = torch.nn.functional.softmax(resnet50(batch), dim=1)\\', \\'results = utils.pick_n_best(predictions=output, n=5)\\', \\'for uri, result in zip(uris, results):\\', \\' img = Image.open(requests.get(uri, stream=True).raw)\\', \\' img.thumbnail((256,256), Image.ANTIALIAS)\\', \\' plt.imshow(img)\\', \\' plt.show()\\', \\' print(result)\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': \\'~0.5% top1 improvement over ResNet50 v1\\'}, \\'description\\': \\'The ResNet50 v1.5 model is a modified version of the original ResNet50 v1 model. The difference between v1 and v1.5 is that, in the bottleneck blocks which requires downsampling, v1 has stride = 2 in the first 1x1 convolution, whereas v1.5 has stride = 2 in the 3x3 convolution. This difference makes ResNet50 v1.5 slightly more accurate (~0.5% top1) than v1, but comes with a small performance drawback (~5% imgs/sec). The model is initialized as described in Delving deep into rectifiers: Surpassing human-level performance on ImageNet classification. This model is trained with mixed precision using Tensor Cores on Volta, Turing, and the NVIDIA Ampere GPU architectures.\\'}', metadata={})]", "category": "generic"}
{"question_id": 84, "text": " Can you provide a suitable API for landmark image classification with a top-5 accuracy higher than 6% on the ImageNet dataset?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 85, "text": " A company needs an API to identify the make and model of cars from images for their insurance claim processing department. The model should have a top-1 accuracy of atleast 75% on ImageNet. Suggest an API that meets their requirements.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Efficient networks by generating more features from cheap operations\\', \\'api_name\\': \\'GhostNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'huawei-noah/ghostnet\\', model=\\'ghostnet_1x\\', pretrained=True)\", \\'api_arguments\\': [\\'pretrained\\'], \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\', \\'PIL\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'huawei-noah/ghostnet\\', \\'ghostnet_1x\\', pretrained=True)\", \\'model.eval()\\', \\'input_image = Image.open(filename)\\', \\'preprocess = transforms.Compose([\\', \\' transforms.Resize(256),\\', \\' transforms.CenterCrop(224),\\', \\' transforms.ToTensor(),\\', \\' transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\\', \\'])\\', \\'input_tensor = preprocess(input_image)\\', \\'input_batch = input_tensor.unsqueeze(0)\\', \\'if torch.cuda.is_available():\\', \" input_batch = input_batch.to(\\'cuda\\')\", \" model.to(\\'cuda\\')\", \\'with torch.no_grad():\\', \\' output = model(input_batch)\\', \\'probabilities = torch.nn.functional.softmax(output[0], dim=0)\\', \\'print(probabilities)\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'Top-1 acc\\': \\'73.98\\', \\'Top-5 acc\\': \\'91.46\\'}}, \\'description\\': \\'The GhostNet architecture is based on an Ghost module structure which generates more features from cheap operations. Based on a set of intrinsic feature maps, a series of cheap operations are applied to generate many ghost feature maps that could fully reveal information underlying intrinsic features. Experiments conducted on benchmarks demonstrate the superiority of GhostNet in terms of speed and accuracy tradeoff.\\'}', metadata={})]", "category": "generic"}
{"question_id": 87, "text": " I am a research scientist at Google Brain and I need an API to classify images with a top-1 error rate of less than 21%. Provide me an API that does this.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 88, "text": " Enumerate an API that can classify skin cancer patterns from an image of a mole. The model needs to achieve atleast 21.69% top-1_accuracy on ImageNet Dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Object Detection\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Object Detection, Drivable Area Segmentation, Lane Detection\\', \\'api_name\\': \\'YOLOP\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'hustvl/yolop\\', model=\\'yolop\\', pretrained=True)\", \\'api_arguments\\': \\'pretrained\\', \\'python_environment_requirements\\': \\'pip install -qr https://github.com/hustvl/YOLOP/blob/main/requirements.txt\\', \\'example_code\\': \"import torch\\\\nmodel = torch.hub.load(\\'hustvl/yolop\\', \\'yolop\\', pretrained=True)\\\\nimg = torch.randn(1,3,640,640)\\\\ndet_out, da_seg_out,ll_seg_out = model(img)\", \\'performance\\': {\\'dataset\\': \\'BDD100K\\', \\'accuracy\\': {\\'Object Detection\\': {\\'Recall(%)\\': 89.2, \\'mAP50(%)\\': 76.5, \\'Speed(fps)\\': 41}, \\'Drivable Area Segmentation\\': {\\'mIOU(%)\\': 91.5, \\'Speed(fps)\\': 41}, \\'Lane Detection\\': {\\'mIOU(%)\\': 70.5, \\'IOU(%)\\': 26.2}}}, \\'description\\': \\'YOLOP is an efficient multi-task network that can jointly handle three crucial tasks in autonomous driving: object detection, drivable area segmentation and lane detection. And it is also the first to reach real-time on embedded devices while maintaining state-of-the-art level performance on the BDD100K dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 89, "text": " An online shopping website team wants to classify the images of their fashion inventory. Recommend them an API that can classify these images. The model should have a top-5 error under 11%.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 90, "text": " Suggest an API that offers pretrained models on image classification tasks using semi-supervised learning techniques, and achieves state-of-the-art accuracy on ImageNet for ResNet-50 architecture.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 91, "text": " I need a model for classifying dog breeds based on images. Recommend an API that achieves at least 80% Top-1 accuracy on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 92, "text": " I want to create a video tagging AI to classify content on Instagram TV. Suggest me an appropriate API that is able to achieve a top-5 accuracy of 90% and above on the Kinetics 400 dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Video Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'3D ResNet\\', \\'api_name\\': \\'slow_r50\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/pytorchvideo\\', model=\\'slow_r50\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'json\\', \\'urllib\\', \\'pytorchvideo\\', \\'torchvision\\', \\'torchaudio\\', \\'torchtext\\', \\'torcharrow\\', \\'TorchData\\', \\'TorchRec\\', \\'TorchServe\\', \\'PyTorch on XLA Devices\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/pytorchvideo\\', \\'slow_r50\\', pretrained=True)\", \"device = \\'cpu\\'\", \\'model = model.eval()\\', \\'model = model.to(device)\\'], \\'performance\\': {\\'dataset\\': \\'Kinetics 400\\', \\'accuracy\\': {\\'top_1\\': 74.58, \\'top_5\\': 91.63}, \\'Flops (G)\\': 54.52, \\'Params (M)\\': 32.45}, \\'description\\': \"The 3D ResNet model is a Resnet-style video classification network pretrained on the Kinetics 400 dataset. It is based on the architecture from the paper \\'SlowFast Networks for Video Recognition\\' by Christoph Feichtenhofer et al.\"}', metadata={})]", "category": "generic"}
{"question_id": 93, "text": " I am a scientist analyzing satellite images to detect deforestation. Provide an API which can create semantic segmentations maps. The model should have a mean IoU of atleast 66% on COCO dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Object Detection\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Traffic Object Detection, Drivable Area Segmentation, Lane Detection\\', \\'api_name\\': \\'HybridNets\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'datvuthanh/hybridnets\\', model=\\'hybridnets\\', pretrained=True)\", \\'api_arguments\\': \\'pretrained\\', \\'python_environment_requirements\\': \\'Python>=3.7, PyTorch>=1.10\\', \\'example_code\\': \"import torch\\\\nmodel = torch.hub.load(\\'datvuthanh/hybridnets\\', \\'hybridnets\\', pretrained=True)\\\\nimg = torch.randn(1,3,640,384)\\\\nfeatures, regression, classification, anchors, segmentation = model(img)\", \\'performance\\': {\\'dataset\\': [{\\'name\\': \\'BDD100K\\', \\'accuracy\\': {\\'Traffic Object Detection\\': {\\'Recall (%)\\': 92.8, \\'mAP@0.5 (%)\\': 77.3}, \\'Drivable Area Segmentation\\': {\\'Drivable mIoU (%)\\': 90.5}, \\'Lane Line Detection\\': {\\'Accuracy (%)\\': 85.4, \\'Lane Line IoU (%)\\': 31.6}}}]}, \\'description\\': \\'HybridNets is an end2end perception network for multi-tasks. Our work focused on traffic object detection, drivable area segmentation and lane detection. HybridNets can run real-time on embedded systems, and obtains SOTA Object Detection, Lane Detection on BDD100K Dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 94, "text": " What API should I use to create a music album cover generator that has to achieve atleast 96% top-5 accuracy on the ImageNet dataset?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 95, "text": " I am working on a project that requires a text label and bounding box around an object in an image for realtime video detection. Please propose an API model that can perform this task efficiently on the COCO dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Object Detection\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Object Detection, Drivable Area Segmentation, Lane Detection\\', \\'api_name\\': \\'YOLOP\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'hustvl/yolop\\', model=\\'yolop\\', pretrained=True)\", \\'api_arguments\\': \\'pretrained\\', \\'python_environment_requirements\\': \\'pip install -qr https://github.com/hustvl/YOLOP/blob/main/requirements.txt\\', \\'example_code\\': \"import torch\\\\nmodel = torch.hub.load(\\'hustvl/yolop\\', \\'yolop\\', pretrained=True)\\\\nimg = torch.randn(1,3,640,640)\\\\ndet_out, da_seg_out,ll_seg_out = model(img)\", \\'performance\\': {\\'dataset\\': \\'BDD100K\\', \\'accuracy\\': {\\'Object Detection\\': {\\'Recall(%)\\': 89.2, \\'mAP50(%)\\': 76.5, \\'Speed(fps)\\': 41}, \\'Drivable Area Segmentation\\': {\\'mIOU(%)\\': 91.5, \\'Speed(fps)\\': 41}, \\'Lane Detection\\': {\\'mIOU(%)\\': 70.5, \\'IOU(%)\\': 26.2}}}, \\'description\\': \\'YOLOP is an efficient multi-task network that can jointly handle three crucial tasks in autonomous driving: object detection, drivable area segmentation and lane detection. And it is also the first to reach real-time on embedded devices while maintaining state-of-the-art level performance on the BDD100K dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 96, "text": " Samsung is building a mobile app for identifying plants in their garden. Recommend a model that would be suitable for this task. The model should have a top-1 error below 25% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 97, "text": " I need help identifying different regions of an image. Can you suggest an API that is pretrained on COCO train2017 dataset and has atleast 60% mean IOU in the COCO val dataset?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Semantic Segmentation\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Fully-Convolutional Network\\', \\'api_name\\': \\'fcn_resnet50\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'fcn_resnet50\\', pretrained=True)\", \\'api_arguments\\': [{\\'name\\': \\'pretrained\\', \\'type\\': \\'boolean\\', \\'description\\': \\'If True, returns a model pre-trained on COCO train2017\\'}], \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\', \\'PIL\\', \\'matplotlib\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'fcn_resnet50\\', pretrained=True)\", \\'model.eval()\\', \\'from PIL import Image\\', \\'from torchvision import transforms\\', \\'input_image = Image.open(filename)\\', \\'input_image = input_image.convert(\"RGB\")\\', \\'preprocess = transforms.Compose([\\', \\' transforms.ToTensor(),\\', \\' transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\\', \\'])\\', \\'input_tensor = preprocess(input_image)\\', \\'input_batch = input_tensor.unsqueeze(0)\\', \\'if torch.cuda.is_available():\\', \" input_batch = input_batch.to(\\'cuda\\')\", \" model.to(\\'cuda\\')\", \\'with torch.no_grad():\\', \" output = model(input_batch)[\\'out\\'][0]\", \\'output_predictions = output.argmax(0)\\'], \\'performance\\': {\\'dataset\\': \\'COCO val2017\\', \\'accuracy\\': {\\'fcn_resnet50\\': {\\'Mean IOU\\': 60.5, \\'Global Pixelwise Accuracy\\': 91.4}}}, \\'description\\': \\'FCN-ResNet is a Fully-Convolutional Network model using a ResNet-50 or a ResNet-101 backbone. The pre-trained models have been trained on a subset of COCO train2017, on the 20 categories that are present in the Pascal VOC dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 98, "text": " As a car components retailer, I want to have an image recognition model that can recognize car parts from an taken photo to help me categorize my products. I need a model with atleast 21.96% Top-1 error on ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 99, "text": " Suggest an API for helping a photo editing app classify different lighting conditions in the input images. The chosen model should have a top-1 accuracy above 79%.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'SNNMLP\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'huawei-noah/Efficient-AI-Backbones\\', model=\\'snnmlp_s\\', pretrained=True)\", \\'api_arguments\\': [{\\'name\\': \\'snnmlp_s\\', \\'type\\': \\'str\\', \\'description\\': \\'SNNMLP Small model\\'}], \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\', \\'PIL\\', \\'urllib\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'huawei-noah/Efficient-AI-Backbones\\', \\'snnmlp_s\\', pretrained=True)\", \\'model.eval()\\', \\'from PIL import Image\\', \\'from torchvision import transforms\\', \\'input_image = Image.open(filename)\\', \\'preprocess = transforms.Compose([\\', \\' transforms.Resize(256),\\', \\' transforms.CenterCrop(224),\\', \\' transforms.ToTensor(),\\', \\' transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\\', \\'])\\', \\'input_tensor = preprocess(input_image)\\', \\'input_batch = input_tensor.unsqueeze(0)\\', \\'if torch.cuda.is_available():\\', \" input_batch = input_batch.to(\\'cuda\\')\", \" model.to(\\'cuda\\')\", \\'with torch.no_grad():\\', \\' output = model(input_batch)\\', \\'print(torch.nn.functional.softmax(output[0], dim=0))\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'model\\': \\'SNNMLP Small\\', \\'top-1\\': 83.3}}, \\'description\\': \\'SNNMLP incorporates the mechanism of LIF neurons into the MLP models, to achieve better accuracy without extra FLOPs. We propose a full-precision LIF operation to communicate between patches, including horizontal LIF and vertical LIF in different directions. We also propose to use group LIF to extract better local features. With LIF modules, our SNNMLP model achieves 81.9%, 83.3% and 83.6% top-1 accuracy on ImageNet dataset with only 4.4G, 8.5G and 15.2G FLOPs, respectively.\\'}', metadata={})]", "category": "generic"}
{"question_id": 100, "text": " What API would you recommend to lower the computation power of an Image classifier on a CPU while maintaining an accuracy of atleast 75.0 %?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Object Detection\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Object Detection, Drivable Area Segmentation, Lane Detection\\', \\'api_name\\': \\'YOLOP\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'hustvl/yolop\\', model=\\'yolop\\', pretrained=True)\", \\'api_arguments\\': \\'pretrained\\', \\'python_environment_requirements\\': \\'pip install -qr https://github.com/hustvl/YOLOP/blob/main/requirements.txt\\', \\'example_code\\': \"import torch\\\\nmodel = torch.hub.load(\\'hustvl/yolop\\', \\'yolop\\', pretrained=True)\\\\nimg = torch.randn(1,3,640,640)\\\\ndet_out, da_seg_out,ll_seg_out = model(img)\", \\'performance\\': {\\'dataset\\': \\'BDD100K\\', \\'accuracy\\': {\\'Object Detection\\': {\\'Recall(%)\\': 89.2, \\'mAP50(%)\\': 76.5, \\'Speed(fps)\\': 41}, \\'Drivable Area Segmentation\\': {\\'mIOU(%)\\': 91.5, \\'Speed(fps)\\': 41}, \\'Lane Detection\\': {\\'mIOU(%)\\': 70.5, \\'IOU(%)\\': 26.2}}}, \\'description\\': \\'YOLOP is an efficient multi-task network that can jointly handle three crucial tasks in autonomous driving: object detection, drivable area segmentation and lane detection. And it is also the first to reach real-time on embedded devices while maintaining state-of-the-art level performance on the BDD100K dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 101, "text": " A surveillance camera placed in a parking lot needs to recognize vehicle types from captured images. Please provide a suitable API that can recognize the type of different vehicles with more than 78% Top-1 accuracy on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 102, "text": " Develop an AI system that can classify quality of fruits into good, average, and bad from an image clicked in a grocery store. API should have a top-5 error of less than 10% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 103, "text": " Help me to choose a model that efficiently classifies the breed of my dog from an image with a top-5 error of less than 15% on ImageNet.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 104, "text": " Help me to find an API for a clothing recommendation app. Requirements: The model must classify the category of the clothing, and have atleast 8.58% top-5 error on Imagenet Dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 105, "text": " Advise an API that can identify objects from a picture of a road. The model must have a top-5 accuracy above 90% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 106, "text": " I am running a soccer video store and sorting videos by the type of play (e.g., goals, saves, tricks). Recommend an API that can classify actions in short videos clips from soccer games.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Video Classification\\', \\'framework\\': \\'PyTorchVideo\\', \\'functionality\\': \\'X3D Networks\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/pytorchvideo\\', model=\\'x3d_s\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/pytorchvideo\\', \\'model\\': \\'x3d_s\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\', \\'pytorchvideo\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/pytorchvideo\\', \\'x3d_s\\', pretrained=True)\", \"device = \\'cpu\\'\", \\'model = model.eval()\\', \\'model = model.to(device)\\'], \\'performance\\': {\\'dataset\\': \\'Kinetics 400\\', \\'accuracy\\': {\\'top1\\': 73.33, \\'top5\\': 91.27}, \\'flops\\': 2.96, \\'params\\': 3.79}, \\'description\\': \"X3D model architectures are based on the paper \\'X3D: Expanding Architectures for Efficient Video Recognition\\' by Christoph Feichtenhofer. They are pretrained on the Kinetics 400 dataset. This model is capable of classifying video clips into different action categories. It is provided by the FAIR PyTorchVideo library.\"}', metadata={})]", "category": "generic"}
{"question_id": 107, "text": " I am working on a project for Tesla to design a GPU-efficient model for image classification. Could you provide an API that allows me to load an image classification model that is up to 2x faster than EfficientNet-X and FBNet-V3 on an NVIDIA GPU?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'GPUNet Networks\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'NVIDIA/DeepLearningExamples:torchhub\\', model=\\'nvidia_gpunet\\', pretrained=True, model_type=model_type, model_math=precision)\", \\'api_arguments\\': {\\'repository\\': \\'NVIDIA/DeepLearningExamples:torchhub\\', \\'model\\': \\'nvidia_gpunet\\', \\'pretrained\\': \\'True\\', \\'model_type\\': \\'GPUNet-0\\', \\'model_math\\': \\'fp32\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'validators\\', \\'matplotlib\\', \\'timm==0.5.4\\'], \\'example_code\\': [\\'import torch\\', \"model_type = \\'GPUNet-0\\'\", \"precision = \\'fp32\\'\", \"gpunet = torch.hub.load(\\'NVIDIA/DeepLearningExamples:torchhub\\', \\'nvidia_gpunet\\', pretrained=True, model_type=model_type, model_math=precision)\", \"device = torch.device(\\'cuda\\') if torch.cuda.is_available() else torch.device(\\'cpu\\')\", \\'gpunet.to(device)\\', \\'gpunet.eval()\\'], \\'performance\\': {\\'dataset\\': \\'IMAGENET\\', \\'description\\': \\'GPUNet demonstrates state-of-the-art inference performance up to 2x faster than EfficientNet-X and FBNet-V3.\\'}, \\'description\\': \\'GPUNet is a family of Convolutional Neural Networks designed by NVIDIA using novel Neural Architecture Search (NAS) methods. They are optimized for NVIDIA GPU and TensorRT performance. GPUNet models are pretrained on the IMAGENET dataset and are capable of classifying images into different categories. The models are provided by the NVIDIA Deep Learning Examples library.\\'}', metadata={})]", "category": "generic"}
{"question_id": 108, "text": " A neurosurgeon needs to find abnormalities in brain MRI images. Recommend an API that can segment abnormalities in brain MRI images and provide a probability map of the same size as the input image.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Semantic Segmentation\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Biomedical Image Segmentation\\', \\'api_name\\': \\'U-Net for brain MRI\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'mateuszbuda/brain-segmentation-pytorch\\', model=\\'unet\\', in_channels=3, out_channels=1, init_features=32, pretrained=True)\", \\'api_arguments\\': {\\'in_channels\\': 3, \\'out_channels\\': 1, \\'init_features\\': 32, \\'pretrained\\': True}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\', \\'numpy\\', \\'PIL\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'mateuszbuda/brain-segmentation-pytorch\\', \\'unet\\', in_channels=3, out_channels=1, init_features=32, pretrained=True)\", \\'import numpy as np\\', \\'from PIL import Image\\', \\'from torchvision import transforms\\', \\'input_image = Image.open(filename)\\', \\'m, s = np.mean(input_image, axis=(0, 1)), np.std(input_image, axis=(0, 1))\\', \\'preprocess = transforms.Compose([transforms.ToTensor(),transforms.Normalize(mean=m, std=s)])\\', \\'input_tensor = preprocess(input_image)\\', \\'input_batch = input_tensor.unsqueeze(0)\\', \\'if torch.cuda.is_available():\\', \" input_batch = input_batch.to(\\'cuda\\')\", \" model = model.to(\\'cuda\\')\", \\'with torch.no_grad():\\', \\' output = model(input_batch)\\', \\'print(torch.round(output[0]))\\'], \\'performance\\': {\\'dataset\\': \\'kaggle.com/mateuszbuda/lgg-mri-segmentation\\'}, \\'description\\': \\'U-Net with batch normalization for biomedical image segmentation with pretrained weights for abnormality segmentation in brain MRI. The model comprises four levels of blocks containing two convolutional layers with batch normalization and ReLU activation function, and one max pooling layer in the encoding part and up-convolutional layers instead in the decoding part. The number of convolutional filters in each block is 32, 64, 128, and 256. The bottleneck layer has 512 convolutional filters. From the encoding layers, skip connections are used to the corresponding layers in the decoding part. Input image is a 3-channel brain MRI slice from pre-contrast, FLAIR, and post-contrast sequences, respectively. Output is a one-channel probability map of abnormality regions with the same size as the input image.\\'}', metadata={})]", "category": "generic"}
{"question_id": 109, "text": " Need a pretrained model to classifiy traffic signs with atleast 94% accuracy. Which API should I use?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'HarDNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'PingoLH/Pytorch-HarDNet\\', model=\\'hardnet85\\', pretrained=True)\", \\'api_arguments\\': [{\\'name\\': \\'hardnet85\\', \\'type\\': \\'str\\', \\'description\\': \\'HarDNet-85 model\\'}], \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'PingoLH/Pytorch-HarDNet\\', \\'hardnet85\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'hardnet85\\': {\\'Top-1 error\\': 21.96, \\'Top-5 error\\': 6.11}}}, \\'description\\': \\'Harmonic DenseNet (HarDNet) is a low memory traffic CNN model, which is fast and efficient. The basic concept is to minimize both computational cost and memory access cost at the same time, such that the HarDNet models are 35% faster than ResNet running on GPU comparing to models with the same accuracy (except the two DS models that were designed for comparing with MobileNet).\\'}', metadata={})]", "category": "generic"}
{"question_id": 110, "text": " Recommend an API for e-commerce clothing platform to classify their products into different categories (e.g., shirts, pants, jackets). The model should achieve Top-1 accuracy of atleast 77% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 111, "text": " I need a pre-trained API capable of recognizing objects in images with an accuracy of atleast 84% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 112, "text": " I need my app to identify landmarks in photos on a server backend, so I need an API that can help me classify photographs efficiently and accurately on a CPU.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 113, "text": " National Geographic Magazine wants to classify images of animals in their collection. Propose an API for image classification that has at least a 90% top-5 accuracy on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 114, "text": " I am building a product categorization tool for Amazon and I need an API that can provide me with top-1 accuracy of lower than 25% on ImageNet. Can you please find me an API?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Object Detection\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Traffic Object Detection, Drivable Area Segmentation, Lane Detection\\', \\'api_name\\': \\'HybridNets\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'datvuthanh/hybridnets\\', model=\\'hybridnets\\', pretrained=True)\", \\'api_arguments\\': \\'pretrained\\', \\'python_environment_requirements\\': \\'Python>=3.7, PyTorch>=1.10\\', \\'example_code\\': \"import torch\\\\nmodel = torch.hub.load(\\'datvuthanh/hybridnets\\', \\'hybridnets\\', pretrained=True)\\\\nimg = torch.randn(1,3,640,384)\\\\nfeatures, regression, classification, anchors, segmentation = model(img)\", \\'performance\\': {\\'dataset\\': [{\\'name\\': \\'BDD100K\\', \\'accuracy\\': {\\'Traffic Object Detection\\': {\\'Recall (%)\\': 92.8, \\'mAP@0.5 (%)\\': 77.3}, \\'Drivable Area Segmentation\\': {\\'Drivable mIoU (%)\\': 90.5}, \\'Lane Line Detection\\': {\\'Accuracy (%)\\': 85.4, \\'Lane Line IoU (%)\\': 31.6}}}]}, \\'description\\': \\'HybridNets is an end2end perception network for multi-tasks. Our work focused on traffic object detection, drivable area segmentation and lane detection. HybridNets can run real-time on embedded systems, and obtains SOTA Object Detection, Lane Detection on BDD100K Dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 115, "text": " Suggest an API that can recognize and classify different animal species from photographs. The model should achieve a top-1 accuracy of 22.38% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 116, "text": " Suggest a pre-trained image recognition model that can tell me difference between cats and dogs from pictures, with a top-5 error rate of less than 10% on ImageNet dataset\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 117, "text": " A machine learning engineer needs an API to recognize objects in an image for an e-commerce website. Do not recommend MobileNet. The model should have a top-1 error less than 30% on ImageNet.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'SqueezeNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'squeezenet1_0\\', pretrained=True)\", \\'api_arguments\\': {\\'version\\': \\'v0.10.0\\', \\'model\\': [\\'squeezenet1_0\\'], \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'squeezenet1_0\\', pretrained=True)\", \\'model.eval()\\', \\'from PIL import Image\\', \\'from torchvision import transforms\\', \\'input_image = Image.open(filename)\\', \\'preprocess = transforms.Compose([\\', \\' transforms.Resize(256),\\', \\' transforms.CenterCrop(224),\\', \\' transforms.ToTensor(),\\', \\' transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\\', \\'])\\', \\'input_tensor = preprocess(input_image)\\', \\'input_batch = input_tensor.unsqueeze(0)\\', \\'if torch.cuda.is_available():\\', \" input_batch = input_batch.to(\\'cuda\\')\", \" model.to(\\'cuda\\')\", \\'with torch.no_grad():\\', \\' output = model(input_batch)\\', \\'probabilities = torch.nn.functional.softmax(output[0], dim=0)\\', \\'print(probabilities)\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'squeezenet1_0\\': {\\'Top-1 error\\': 41.9, \\'Top-5 error\\': 19.58}}}, \\'description\\': \\'SqueezeNet is an image classification model that achieves AlexNet-level accuracy with 50x fewer parameters. It has two versions: squeezenet1_0 and squeezenet1_1, with squeezenet1_1 having 2.4x less computation and slightly fewer parameters than squeezenet1_0, without sacrificing accuracy.\\'}', metadata={})]", "category": "generic"}
{"question_id": 118, "text": " I need an API that is more accurate than ResNet50 for classifying wildlife from images taken in the field. The model should have a top-5 error less than 5.91% on Imagenet.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'ResNet50\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'NVIDIA/DeepLearningExamples:torchhub\\', model=\\'nvidia_resnet50\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'pip install validators matplotlib\\'], \\'example_code\\': [\\'import torch\\', \\'from PIL import Image\\', \\'import torchvision.transforms as transforms\\', \\'import numpy as np\\', \\'import json\\', \\'import requests\\', \\'import matplotlib.pyplot as plt\\', \\'import warnings\\', \"warnings.filterwarnings(\\'ignore\\')\", \\'%matplotlib inline\\', \"device = torch.device(\\'cuda\\') if torch.cuda.is_available() else torch.device(\\'cpu\\')\", \"print(f\\'Using {device} for inference\\')\", \"resnet50 = torch.hub.load(\\'NVIDIA/DeepLearningExamples:torchhub\\', \\'nvidia_resnet50\\', pretrained=True)\", \"utils = torch.hub.load(\\'NVIDIA/DeepLearningExamples:torchhub\\', \\'nvidia_convnets_processing_utils\\')\", \\'resnet50.eval().to(device)\\', \\'uris = [...]\\', \\'batch = torch.cat([utils.prepare_input_from_uri(uri) for uri in uris]).to(device)\\', \\'with torch.no_grad():\\', \\' output = torch.nn.functional.softmax(resnet50(batch), dim=1)\\', \\'results = utils.pick_n_best(predictions=output, n=5)\\', \\'for uri, result in zip(uris, results):\\', \\' img = Image.open(requests.get(uri, stream=True).raw)\\', \\' img.thumbnail((256,256), Image.ANTIALIAS)\\', \\' plt.imshow(img)\\', \\' plt.show()\\', \\' print(result)\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': \\'~0.5% top1 improvement over ResNet50 v1\\'}, \\'description\\': \\'The ResNet50 v1.5 model is a modified version of the original ResNet50 v1 model. The difference between v1 and v1.5 is that, in the bottleneck blocks which requires downsampling, v1 has stride = 2 in the first 1x1 convolution, whereas v1.5 has stride = 2 in the 3x3 convolution. This difference makes ResNet50 v1.5 slightly more accurate (~0.5% top1) than v1, but comes with a small performance drawback (~5% imgs/sec). The model is initialized as described in Delving deep into rectifiers: Surpassing human-level performance on ImageNet classification. This model is trained with mixed precision using Tensor Cores on Volta, Turing, and the NVIDIA Ampere GPU architectures.\\'}', metadata={})]", "category": "generic"}
{"question_id": 119, "text": " I work for Facebook in the Computer Vision team. Please suggest an API for classifying images with a state-of-the-art accuracy of 81.2% on ImageNet for the ResNet-50 model architecture using semi-supervised learning.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 120, "text": " I want to classify whether there's a dog in a given photograph. Give me an API that I can use to detect dog breeds with at least 76% top-1 accuracy on ImageNet.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'HarDNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'PingoLH/Pytorch-HarDNet\\', model=\\'hardnet68\\', pretrained=True)\", \\'api_arguments\\': [{\\'name\\': \\'hardnet68\\', \\'type\\': \\'str\\', \\'description\\': \\'HarDNet-68 model\\'}], \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'PingoLH/Pytorch-HarDNet\\', \\'hardnet68\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'hardnet68\\': {\\'Top-1 error\\': 23.52, \\'Top-5 error\\': 6.99}}}, \\'description\\': \\'Harmonic DenseNet (HarDNet) is a low memory trafficCNN model, which is fast and efficient. The basic concept is to minimize both computational cost and memory access cost at the same time, such that the HarDNet models are 35% faster than ResNet running on GPU comparing to models with the same accuracy (except the two DS models that were designed for comparing with MobileNet).\\'}', metadata={})]", "category": "generic"}
{"question_id": 121, "text": " As a developer at Spotify, I want a video classification API that has at least 91% top-5 accuracy on the Kinetics 400 dataset. Provide me the API call.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Video Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'3D ResNet\\', \\'api_name\\': \\'slow_r50\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/pytorchvideo\\', model=\\'slow_r50\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'json\\', \\'urllib\\', \\'pytorchvideo\\', \\'torchvision\\', \\'torchaudio\\', \\'torchtext\\', \\'torcharrow\\', \\'TorchData\\', \\'TorchRec\\', \\'TorchServe\\', \\'PyTorch on XLA Devices\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/pytorchvideo\\', \\'slow_r50\\', pretrained=True)\", \"device = \\'cpu\\'\", \\'model = model.eval()\\', \\'model = model.to(device)\\'], \\'performance\\': {\\'dataset\\': \\'Kinetics 400\\', \\'accuracy\\': {\\'top_1\\': 74.58, \\'top_5\\': 91.63}, \\'Flops (G)\\': 54.52, \\'Params (M)\\': 32.45}, \\'description\\': \"The 3D ResNet model is a Resnet-style video classification network pretrained on the Kinetics 400 dataset. It is based on the architecture from the paper \\'SlowFast Networks for Video Recognition\\' by Christoph Feichtenhofer et al.\"}', metadata={})]", "category": "generic"}
{"question_id": 122, "text": " I am building a social media app and need an API that can classify over 1,000 categories of images from user posts. The model should achieve state-of-the-art accuracy of 85.4% Top-1 Acc on ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 123, "text": " I'm working on an AI project that requires a pre-trained image classifier to identify objects/items in images. Can you recommend an API/model with good accuracy on ImageNet dataset?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Efficient networks by generating more features from cheap operations\\', \\'api_name\\': \\'GhostNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'huawei-noah/ghostnet\\', model=\\'ghostnet_1x\\', pretrained=True)\", \\'api_arguments\\': [\\'pretrained\\'], \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\', \\'PIL\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'huawei-noah/ghostnet\\', \\'ghostnet_1x\\', pretrained=True)\", \\'model.eval()\\', \\'input_image = Image.open(filename)\\', \\'preprocess = transforms.Compose([\\', \\' transforms.Resize(256),\\', \\' transforms.CenterCrop(224),\\', \\' transforms.ToTensor(),\\', \\' transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\\', \\'])\\', \\'input_tensor = preprocess(input_image)\\', \\'input_batch = input_tensor.unsqueeze(0)\\', \\'if torch.cuda.is_available():\\', \" input_batch = input_batch.to(\\'cuda\\')\", \" model.to(\\'cuda\\')\", \\'with torch.no_grad():\\', \\' output = model(input_batch)\\', \\'probabilities = torch.nn.functional.softmax(output[0], dim=0)\\', \\'print(probabilities)\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'Top-1 acc\\': \\'73.98\\', \\'Top-5 acc\\': \\'91.46\\'}}, \\'description\\': \\'The GhostNet architecture is based on an Ghost module structure which generates more features from cheap operations. Based on a set of intrinsic feature maps, a series of cheap operations are applied to generate many ghost feature maps that could fully reveal information underlying intrinsic features. Experiments conducted on benchmarks demonstrate the superiority of GhostNet in terms of speed and accuracy tradeoff.\\'}', metadata={})]", "category": "generic"}
{"question_id": 124, "text": " Find me an API that can be used for classifying pictures taken on a smartphone to categorize various food types. The API must achieve a top-1 error rate of no more than 25.71% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 125, "text": " Recommend me an API to perform landscape and scenery classification with Top-1 error rate of less than 25%. The model should be computationally efficient.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 126, "text": " Recommend an API that can be used to classify vehicle types in a dataset from a car dealership. The model should have a top-1 accuracy of at least 77% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 127, "text": " I am John, head of AI division at Frog Inc. I want to implement a model that can classify different images into 1000 classes. Can you give me an API that achieves better than 23% top-1 error on ImageNet dataset?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 128, "text": " A wildlife reserve is classifying different types of animal photos from their CCTV images. Suggest an API to classify different types of animals. The model needs a top-1 accuracy of atleast 83% on the Imagenet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 129, "text": " Identify a suitable API to interpret chest x-rays to recognise if the x-ray indicate signs of pneumonia. The API should atleast achieve 81% top-1 error on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 130, "text": " I am designing a mobile app to identify car models. I need an image classification API that is optimized for mobile devices and has an accuracy of around 74.6%. Can you recommend one?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'SqueezeNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'squeezenet1_1\\', pretrained=True)\", \\'api_arguments\\': {\\'version\\': \\'v0.10.0\\', \\'model\\': [\\'squeezenet1_1\\'], \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'squeezenet1_1\\', pretrained=True)\", \\'model.eval()\\', \\'from PIL import Image\\', \\'from torchvision import transforms\\', \\'input_image = Image.open(filename)\\', \\'preprocess = transforms.Compose([\\', \\' transforms.Resize(256),\\', \\' transforms.CenterCrop(224),\\', \\' transforms.ToTensor(),\\', \\' transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\\', \\'])\\', \\'input_tensor = preprocess(input_image)\\', \\'input_batch = input_tensor.unsqueeze(0)\\', \\'if torch.cuda.is_available():\\', \" input_batch = input_batch.to(\\'cuda\\')\", \" model.to(\\'cuda\\')\", \\'with torch.no_grad():\\', \\' output = model(input_batch)\\', \\'probabilities = torch.nn.functional.softmax(output[0], dim=0)\\', \\'print(probabilities)\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'squeezenet1_1\\': {\\'Top-1 error\\': 41.81, \\'Top-5 error\\': 19.38}}}, \\'description\\': \\'SqueezeNet is an image classification model that achieves AlexNet-level accuracy with 50x fewer parameters. It has two versions: squeezenet1_0 and squeezenet1_1, with squeezenet1_1 having 2.4x less computation and slightly fewer parameters than squeezenet1_0, without sacrificing accuracy.\\'}', metadata={})]", "category": "generic"}
{"question_id": 131, "text": " I want to classify images of animals with a model that has a top-1 accuracy of atleast 80% on the ImageNet dataset. Can you suggest an API for that purpose?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 132, "text": " A start-up requires an image classification API for their application. Provide an API which could classify images with atleast 80% top-5 accuracy on the ImageNet dataset, and should be optimized for smaller model size and less computation.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 133, "text": " Identify a good API for sports video analysis. The model should be able to recognize the various actions happening in sports and should achieve a minimum of 92% top-5 accuracy on the Kinetics 400 dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Video Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'3D ResNet\\', \\'api_name\\': \\'slow_r50\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/pytorchvideo\\', model=\\'slow_r50\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'json\\', \\'urllib\\', \\'pytorchvideo\\', \\'torchvision\\', \\'torchaudio\\', \\'torchtext\\', \\'torcharrow\\', \\'TorchData\\', \\'TorchRec\\', \\'TorchServe\\', \\'PyTorch on XLA Devices\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/pytorchvideo\\', \\'slow_r50\\', pretrained=True)\", \"device = \\'cpu\\'\", \\'model = model.eval()\\', \\'model = model.to(device)\\'], \\'performance\\': {\\'dataset\\': \\'Kinetics 400\\', \\'accuracy\\': {\\'top_1\\': 74.58, \\'top_5\\': 91.63}, \\'Flops (G)\\': 54.52, \\'Params (M)\\': 32.45}, \\'description\\': \"The 3D ResNet model is a Resnet-style video classification network pretrained on the Kinetics 400 dataset. It is based on the architecture from the paper \\'SlowFast Networks for Video Recognition\\' by Christoph Feichtenhofer et al.\"}', metadata={})]", "category": "generic"}
{"question_id": 134, "text": " I need an API that can classify animal species from an image. The model requires at least 5.91% top-5 accuracy on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Object Detection\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Object Detection, Drivable Area Segmentation, Lane Detection\\', \\'api_name\\': \\'YOLOP\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'hustvl/yolop\\', model=\\'yolop\\', pretrained=True)\", \\'api_arguments\\': \\'pretrained\\', \\'python_environment_requirements\\': \\'pip install -qr https://github.com/hustvl/YOLOP/blob/main/requirements.txt\\', \\'example_code\\': \"import torch\\\\nmodel = torch.hub.load(\\'hustvl/yolop\\', \\'yolop\\', pretrained=True)\\\\nimg = torch.randn(1,3,640,640)\\\\ndet_out, da_seg_out,ll_seg_out = model(img)\", \\'performance\\': {\\'dataset\\': \\'BDD100K\\', \\'accuracy\\': {\\'Object Detection\\': {\\'Recall(%)\\': 89.2, \\'mAP50(%)\\': 76.5, \\'Speed(fps)\\': 41}, \\'Drivable Area Segmentation\\': {\\'mIOU(%)\\': 91.5, \\'Speed(fps)\\': 41}, \\'Lane Detection\\': {\\'mIOU(%)\\': 70.5, \\'IOU(%)\\': 26.2}}}, \\'description\\': \\'YOLOP is an efficient multi-task network that can jointly handle three crucial tasks in autonomous driving: object detection, drivable area segmentation and lane detection. And it is also the first to reach real-time on embedded devices while maintaining state-of-the-art level performance on the BDD100K dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 135, "text": " I'm working on a project where I need to classify different bird species. Recommend an API that can help with image classification and has a state-of-the-art accuracy of more than 80% top-1 accuracy on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Semi-supervised and semi-weakly supervised ImageNet Models\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/semi-supervised-ImageNet1K-models\\', model=\\'resnet18_swsl\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'model\\': \\'resnet18_swsl\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/semi-supervised-ImageNet1K-models\\', \\'resnet18_swsl\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'description\\': \\'Semi-supervised and semi-weakly supervised ImageNet models achieve state-of-the-art accuracy of 81.2% on ImageNet for the widely used/adopted ResNet-50 model architecture.\\'}, \\'description\\': \"Semi-supervised and semi-weakly supervised ImageNet Models are introduced in the \\'Billion scale semi-supervised learning for image classification\\' paper. These models are pretrained on a subset of unlabeled YFCC100M public image dataset and fine-tuned with the ImageNet1K training dataset. They are capable of classifying images into different categories and are provided by the Facebook Research library.\"}', metadata={})]", "category": "generic"}
{"question_id": 136, "text": " I need an API for image classification that can achieve at least 88% top-5 accuracy on ImageNet dataset and has around 2.5 million parameters. \\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'SqueezeNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'squeezenet1_0\\', pretrained=True)\", \\'api_arguments\\': {\\'version\\': \\'v0.10.0\\', \\'model\\': [\\'squeezenet1_0\\'], \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'squeezenet1_0\\', pretrained=True)\", \\'model.eval()\\', \\'from PIL import Image\\', \\'from torchvision import transforms\\', \\'input_image = Image.open(filename)\\', \\'preprocess = transforms.Compose([\\', \\' transforms.Resize(256),\\', \\' transforms.CenterCrop(224),\\', \\' transforms.ToTensor(),\\', \\' transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\\', \\'])\\', \\'input_tensor = preprocess(input_image)\\', \\'input_batch = input_tensor.unsqueeze(0)\\', \\'if torch.cuda.is_available():\\', \" input_batch = input_batch.to(\\'cuda\\')\", \" model.to(\\'cuda\\')\", \\'with torch.no_grad():\\', \\' output = model(input_batch)\\', \\'probabilities = torch.nn.functional.softmax(output[0], dim=0)\\', \\'print(probabilities)\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'squeezenet1_0\\': {\\'Top-1 error\\': 41.9, \\'Top-5 error\\': 19.58}}}, \\'description\\': \\'SqueezeNet is an image classification model that achieves AlexNet-level accuracy with 50x fewer parameters. It has two versions: squeezenet1_0 and squeezenet1_1, with squeezenet1_1 having 2.4x less computation and slightly fewer parameters than squeezenet1_0, without sacrificing accuracy.\\'}', metadata={})]", "category": "generic"}
{"question_id": 137, "text": " A retail store is developing a system to recognize different types of products from images. Recommend an API that can classify images with high accuracy. The model should have a top-1 error rate of no more than 25% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'Inception_v3\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'inception_v3\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'1.9.0\\', \\'torchvision\\': \\'0.10.0\\'}, \\'example_code\\': {\\'import_libraries\\': \\'import torch\\', \\'load_model\\': \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'inception_v3\\', pretrained=True)\", \\'model_evaluation\\': \\'model.eval()\\'}, \\'performance\\': {\\'dataset\\': \\'imagenet\\', \\'accuracy\\': {\\'top-1_error\\': 22.55, \\'top-5_error\\': 6.44}}, \\'description\\': \\'Inception v3, also called GoogleNetv3, is a famous Convolutional Neural Network trained on the ImageNet dataset from 2015. It is based on the exploration of ways to scale up networks to utilize the added computation as efficiently as possible by using suitably factorized convolutions and aggressive regularization. The model achieves a top-1 error of 22.55% and a top-5 error of 6.44% on the ImageNet dataset.\\'}', metadata={})]", "category": "generic"}
{"question_id": 138, "text": " A news organization needs a tool that will analyze a large collection of images and classify their content. They want a model that can identify image categories with less than a 10% top-5 error rate on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 139, "text": " My team need to build an image classifier with highest accuracy rate possible. What should I do?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'SqueezeNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'squeezenet1_1\\', pretrained=True)\", \\'api_arguments\\': {\\'version\\': \\'v0.10.0\\', \\'model\\': [\\'squeezenet1_1\\'], \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'squeezenet1_1\\', pretrained=True)\", \\'model.eval()\\', \\'from PIL import Image\\', \\'from torchvision import transforms\\', \\'input_image = Image.open(filename)\\', \\'preprocess = transforms.Compose([\\', \\' transforms.Resize(256),\\', \\' transforms.CenterCrop(224),\\', \\' transforms.ToTensor(),\\', \\' transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\\', \\'])\\', \\'input_tensor = preprocess(input_image)\\', \\'input_batch = input_tensor.unsqueeze(0)\\', \\'if torch.cuda.is_available():\\', \" input_batch = input_batch.to(\\'cuda\\')\", \" model.to(\\'cuda\\')\", \\'with torch.no_grad():\\', \\' output = model(input_batch)\\', \\'probabilities = torch.nn.functional.softmax(output[0], dim=0)\\', \\'print(probabilities)\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'squeezenet1_1\\': {\\'Top-1 error\\': 41.81, \\'Top-5 error\\': 19.38}}}, \\'description\\': \\'SqueezeNet is an image classification model that achieves AlexNet-level accuracy with 50x fewer parameters. It has two versions: squeezenet1_0 and squeezenet1_1, with squeezenet1_1 having 2.4x less computation and slightly fewer parameters than squeezenet1_0, without sacrificing accuracy.\\'}', metadata={})]", "category": "generic"}
{"question_id": 140, "text": " I am searching for an API that can help me build a mobile classifying app with input from the phone's camera, and it should be optimized for mobile use. What would you suggest?\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 141, "text": " What is a lightweight image classification API that ranks top-1 and top-5 accuracy close to AlexNet but has 50x fewer parameters? It should have pretrained weights on ImageNet.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 142, "text": " I have been asked to build a deep learning model for dog breed classification. Recommend an API that I can use to recognize different breeds of dogs. The model should have a Top-5 error of less than 12% on the ImageNet dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 143, "text": " Suggest an API that can be used for animal species recognition in wildlife photographs, with a top-5 error of less than 15%. \\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Image Classification\\', \\'api_name\\': \\'AlexNet\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'pytorch/vision\\', model=\\'alexnet\\', pretrained=True)\", \\'api_arguments\\': {\\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': {\\'torch\\': \\'>=1.9.0\\', \\'torchvision\\': \\'>=0.10.0\\'}, \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'pytorch/vision:v0.10.0\\', \\'alexnet\\', pretrained=True)\", \\'model.eval()\\'], \\'performance\\': {\\'dataset\\': \\'ImageNet\\', \\'accuracy\\': {\\'top-1_error\\': 43.45, \\'top-5_error\\': 20.91}}, \\'description\\': \\'AlexNet is a deep convolutional neural network that achieved a top-5 error of 15.3% in the 2012 ImageNet Large Scale Visual Recognition Challenge. The main contribution of the original paper was the depth of the model, which was computationally expensive but made feasible through the use of GPUs during training. The pretrained AlexNet model in PyTorch can be used for image classification tasks.\\'}', metadata={})]", "category": "generic"}
{"question_id": 144, "text": " A sports channel wants to build a video recommender by analyzing the sports action in the video. Tell me which computer vision model is appropriate for this and provide an API that has more than 90% top-5 accuracy on Kinetics 400 dataset.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Video Classification\\', \\'framework\\': \\'PyTorchVideo\\', \\'functionality\\': \\'X3D Networks\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'facebookresearch/pytorchvideo\\', model=\\'x3d_s\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'facebookresearch/pytorchvideo\\', \\'model\\': \\'x3d_s\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\', \\'pytorchvideo\\'], \\'example_code\\': [\\'import torch\\', \"model = torch.hub.load(\\'facebookresearch/pytorchvideo\\', \\'x3d_s\\', pretrained=True)\", \"device = \\'cpu\\'\", \\'model = model.eval()\\', \\'model = model.to(device)\\'], \\'performance\\': {\\'dataset\\': \\'Kinetics 400\\', \\'accuracy\\': {\\'top1\\': 73.33, \\'top5\\': 91.27}, \\'flops\\': 2.96, \\'params\\': 3.79}, \\'description\\': \"X3D model architectures are based on the paper \\'X3D: Expanding Architectures for Efficient Video Recognition\\' by Christoph Feichtenhofer. They are pretrained on the Kinetics 400 dataset. This model is capable of classifying video clips into different action categories. It is provided by the FAIR PyTorchVideo library.\"}', metadata={})]", "category": "generic"}
{"question_id": 145, "text": " Advise a suitable pre-trained model for classifying images, achieving atleast 78% top-1 accuracy on the ImageNet dataset, and easy to use with PyTorch.\\n \n Use this API documentation for reference: [Document(page_content='{\\'domain\\': \\'Classification\\', \\'framework\\': \\'PyTorch\\', \\'functionality\\': \\'Once-for-all (OFA) Networks\\', \\'api_name\\': \\'torch.hub.load\\', \\'api_call\\': \"torch.hub.load(repo_or_dir=\\'mit-han-lab/once-for-all\\', model=\\'ofa_supernet_mbv3_w10\\', pretrained=True)\", \\'api_arguments\\': {\\'repository\\': \\'mit-han-lab/once-for-all\\', \\'model\\': \\'ofa_supernet_mbv3_w10\\', \\'pretrained\\': \\'True\\'}, \\'python_environment_requirements\\': [\\'torch\\', \\'torchvision\\'], \\'example_code\\': [\\'import torch\\', \"super_net_name = \\'ofa_supernet_mbv3_w10\\'\", \"super_net = torch.hub.load(\\'mit-han-lab/once-for-all\\', super_net_name, pretrained=True).eval()\"], \\'performance\\': {\\'description\\': \\'OFA networks outperform state-of-the-art NAS methods (up to 4.0% ImageNet top1 accuracy improvement over MobileNetV3, or same accuracy but 1.5x faster than MobileNetV3, 2.6x faster than EfficientNet w.r.t measured latency) while reducing many orders of magnitude GPU hours and CO2 emission.\\'}, \\'description\\': \\'Once-for-all (OFA) networks are a family of neural networks designed by MIT Han Lab. They decouple training and search, achieving efficient inference across various edge devices and resource constraints. OFA networks are pretrained on the IMAGENET dataset and are capable of classifying images into different categories.\\'}', metadata={})]", "category": "generic"}
